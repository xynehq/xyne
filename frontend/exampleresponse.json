{
  "success": true,
  "data": {
    "id": "acd589c3-cc73-4fc0-860c-798800b512d4",
    "name": "Real Document Content Analysis",
    "description": "Actually read and analyze document content, not just metadata",
    "version": "1.0.0",
    "status": "active",
    "config": {
      "recipient": "avirup.sinha@juspay.in",
      "maxFileSize": "25MB",
      "analysisType": "content-based",
      "supportedFormats": [
        "pdf",
        "jpg",
        "jpeg",
        "png",
        "gif",
        "bmp",
        "doc",
        "docx",
        "txt",
        "rtf"
      ]
    },
    "createdBy": "system",
    "rootWorkflowStepTemplateId": "5f22c76b-1c95-4108-b1c3-ac81e98ada91",
    "createdAt": "2025-09-03T12:59:31.083Z",
    "updatedAt": "2025-09-03T12:59:31.083Z",
    "steps": [
      {
        "id": "622f7e5e-cdc7-4fbe-a783-4acf75d6b5ba",
        "workflowTemplateId": "acd589c3-cc73-4fc0-860c-798800b512d4",
        "name": "Real Analysis Email",
        "description": "Send real content analysis to avirup.sinha@juspay.in",
        "type": "automated",
        "parentStepId": "311c9bf2-3e6f-46e0-98ba-d50c9c665287",
        "prevStepIds": ["311c9bf2-3e6f-46e0-98ba-d50c9c665287"],
        "nextStepIds": [],
        "toolIds": ["e0ddfd85-e683-4258-98ef-e70ddb7547bf"],
        "timeEstimate": 30,
        "metadata": {
          "icon": "📧",
          "step_order": 3,
          "automated_description": "Sending real content analysis via email"
        },
        "createdAt": "2025-09-03T12:59:31.104Z",
        "updatedAt": "2025-09-03T12:59:31.104Z"
      },
      {
        "id": "5f22c76b-1c95-4108-b1c3-ac81e98ada91",
        "workflowTemplateId": "acd589c3-cc73-4fc0-860c-798800b512d4",
        "name": "Real File Upload",
        "description": "Upload file for real content analysis",
        "type": "manual",
        "parentStepId": null,
        "prevStepIds": [],
        "nextStepIds": ["311c9bf2-3e6f-46e0-98ba-d50c9c665287"],
        "toolIds": ["44cfdd74-02b7-4937-8345-19c1dac2bcd3"],
        "timeEstimate": 60,
        "metadata": {
          "icon": "📁",
          "step_order": 1,
          "user_instructions": "Upload document for REAL content analysis"
        },
        "createdAt": "2025-09-03T12:59:31.099Z",
        "updatedAt": "2025-09-03T12:59:31.099Z"
      },
      {
        "id": "311c9bf2-3e6f-46e0-98ba-d50c9c665287",
        "workflowTemplateId": "acd589c3-cc73-4fc0-860c-798800b512d4",
        "name": "Real Content Analysis",
        "description": "Actually read and analyze document content",
        "type": "automated",
        "parentStepId": "5f22c76b-1c95-4108-b1c3-ac81e98ada91",
        "prevStepIds": ["5f22c76b-1c95-4108-b1c3-ac81e98ada91"],
        "nextStepIds": ["622f7e5e-cdc7-4fbe-a783-4acf75d6b5ba"],
        "toolIds": ["73a41727-16bf-40a6-a0a0-79bbf8222c4f"],
        "timeEstimate": 180,
        "metadata": {
          "icon": "🔍",
          "step_order": 2,
          "automated_description": "Reading and analyzing actual document content"
        },
        "createdAt": "2025-09-03T12:59:31.103Z",
        "updatedAt": "2025-09-03T12:59:31.103Z"
      }
    ],
    "workflow_tools": [
      {
        "id": "44cfdd74-02b7-4937-8345-19c1dac2bcd3",
        "type": "form",
        "value": {
          "title": "Real Document Analysis",
          "fields": [
            {
              "id": "document_file",
              "type": "file",
              "label": "Document",
              "maxSize": "25MB",
              "required": true,
              "fileTypes": [
                "pdf",
                "jpg",
                "jpeg",
                "png",
                "gif",
                "bmp",
                "doc",
                "docx",
                "txt",
                "rtf"
              ],
              "description": "Upload document for real content analysis"
            }
          ],
          "description": "Upload document for actual content analysis"
        },
        "config": {
          "submitText": "Analyze Real Content",
          "validation": "strict"
        },
        "createdBy": "system",
        "createdAt": "2025-09-03T12:59:31.092Z",
        "updatedAt": "2025-09-03T12:59:31.092Z"
      },
      {
        "id": "73a41727-16bf-40a6-a0a0-79bbf8222c4f",
        "type": "python_script",
        "value": "\nimport json\nimport os\nimport sys\nfrom datetime import datetime\n\n# Import document processing libraries\ntry:\n    import PyPDF2\n    import pdfplumber\n    from docx import Document\n    from PIL import Image\n    import pytesseract\nexcept ImportError as e:\n    print(f\"Missing library: {e}\")\n\n# Get form data from previous step\nform_data = previous_step_results.get(\"Real File Upload\", {}).get(\"formSubmission\", {}).get(\"formData\", {})\n\ndocument_file = form_data.get(\"document_file\")\n\nif not document_file:\n    result = {\n        \"status\": \"error\",\n        \"error\": \"No file found\"\n    }\nelse:\n    try:\n        file_path = document_file[\"absolutePath\"]\n        file_name = document_file[\"originalFileName\"]\n        file_ext = document_file[\"fileExtension\"].lower()\n        file_size = document_file.get(\"fileSize\", 0)\n        \n        extracted_content = \"\"\n        analysis_summary = \"\"\n        \n        # ACTUALLY READ AND ANALYZE CONTENT BASED ON FILE TYPE\n        \n        if file_ext == 'pdf':\n            # Extract text from PDF using pdfplumber\n            try:\n                with pdfplumber.open(file_path) as pdf:\n                    text_content = \"\"\n                    for page in pdf.pages:\n                        page_text = page.extract_text()\n                        if page_text:\n                            text_content += page_text + \"\\n\"\n                    \n                    extracted_content = text_content.strip()\n                    \n                    if extracted_content:\n                        # Analyze the actual content\n                        words = extracted_content.split()\n                        sentences = [s.strip() for s in extracted_content.split('.') if s.strip()]\n                        \n                        # Extract key information\n                        first_paragraph = extracted_content[:500] + \"...\" if len(extracted_content) > 500 else extracted_content\n                        \n                        # Try to identify document type and key themes\n                        content_lower = extracted_content.lower()\n                        \n                        # Document type detection\n                        if any(word in content_lower for word in ['invoice', 'bill', 'payment', 'amount due']):\n                            doc_type = \"Invoice/Bill\"\n                        elif any(word in content_lower for word in ['contract', 'agreement', 'terms', 'conditions']):\n                            doc_type = \"Contract/Agreement\"\n                        elif any(word in content_lower for word in ['report', 'analysis', 'findings', 'conclusion']):\n                            doc_type = \"Report/Analysis\"\n                        elif any(word in content_lower for word in ['resume', 'cv', 'experience', 'education']):\n                            doc_type = \"Resume/CV\"\n                        else:\n                            doc_type = \"General Document\"\n                        \n                        analysis_summary = f\"\"\"\n**REAL CONTENT ANALYSIS - {file_name}**\n\n**Document Type Detected:** {doc_type}\n\n**Content Overview:**\n{first_paragraph}\n\n**Document Statistics:**\n- Total Words: {len(words):,}\n- Total Sentences: {len(sentences):,}  \n- Total Characters: {len(extracted_content):,}\n- Pages Processed: {len(pdf.pages)}\n\n**Key Content Analysis:**\nBased on the actual text content, this document appears to be a {doc_type.lower()} containing substantial textual information. The content analysis reveals structured information with detailed text that has been successfully extracted and processed.\n\n**Content Quality:** {\"High-quality text with good structure\" if len(words) > 100 else \"Brief content with essential information\"}\n\n**Main Content Preview:**\nThe document begins with: \"{extracted_content[:200]}...\"\n\n**Content Themes:**\n{\", \".join([word.title() for word in set(words) if len(word) > 5 and word.isalpha()][:10]) if words else \"No clear themes identified\"}\n\nThis analysis is based on ACTUAL CONTENT extracted from the PDF, not template text.\n\"\"\"\n                    else:\n                        analysis_summary = f\"\"\"\n**PDF ANALYSIS - {file_name}**\n\nThis PDF file appears to contain non-text content (images, scanned documents, or empty pages). \nNo extractable text was found using standard PDF text extraction methods.\n\n**File Details:**\n- Pages: {len(pdf.pages)}\n- File Size: {file_size:,} bytes\n\n**Recommendation:** This may be a scanned document that requires OCR processing to extract text content.\n\"\"\"\n                        \n            except Exception as e:\n                analysis_summary = f\"Error processing PDF: {str(e)}\"\n                \n        elif file_ext in ['doc', 'docx']:\n            # Extract text from Word document\n            try:\n                doc = Document(file_path)\n                paragraphs = []\n                for paragraph in doc.paragraphs:\n                    if paragraph.text.strip():\n                        paragraphs.append(paragraph.text.strip())\n                \n                extracted_content = \"\\n\".join(paragraphs)\n                \n                if extracted_content:\n                    words = extracted_content.split()\n                    \n                    analysis_summary = f\"\"\"\n**REAL WORD DOCUMENT ANALYSIS - {file_name}**\n\n**Content Overview:**\n{extracted_content[:500]}{\"...\" if len(extracted_content) > 500 else \"\"}\n\n**Document Statistics:**\n- Total Paragraphs: {len(paragraphs)}\n- Total Words: {len(words):,}\n- Total Characters: {len(extracted_content):,}\n\n**Content Analysis:**\nThis Word document contains {len(paragraphs)} paragraphs of actual content. The text has been successfully extracted and analyzed.\n\n**Document Structure:** {\"Well-organized with multiple sections\" if len(paragraphs) > 5 else \"Concise document with focused content\"}\n\n**Full Extracted Content:**\n{extracted_content}\n\nThis analysis is based on ACTUAL CONTENT extracted from the Word document.\n\"\"\"\n                else:\n                    analysis_summary = f\"Word document appears to be empty or contains only formatting without text content.\"\n                    \n            except Exception as e:\n                analysis_summary = f\"Error processing Word document: {str(e)}\"\n                \n        elif file_ext in ['txt', 'md', 'rtf']:\n            # Read text file content\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    extracted_content = f.read()\n                \n                if extracted_content:\n                    words = extracted_content.split()\n                    lines = extracted_content.split('\\n')\n                    non_empty_lines = [line for line in lines if line.strip()]\n                    \n                    analysis_summary = f\"\"\"\n**REAL TEXT FILE ANALYSIS - {file_name}**\n\n**Content Statistics:**\n- Total Words: {len(words):,}\n- Total Lines: {len(lines):,}\n- Non-empty Lines: {len(non_empty_lines):,}\n- Total Characters: {len(extracted_content):,}\n\n**Content Preview:**\n{extracted_content[:600]}{\"...\" if len(extracted_content) > 600 else \"\"}\n\n**Content Analysis:**\nThis text file contains actual readable content with {len(words):,} words across {len(non_empty_lines):,} lines.\n\n**Full Content:**\n{extracted_content}\n\nThis analysis shows the ACTUAL CONTENT of the text file.\n\"\"\"\n                else:\n                    analysis_summary = \"Text file is empty.\"\n                    \n            except Exception as e:\n                analysis_summary = f\"Error reading text file: {str(e)}\"\n                \n        elif file_ext in ['jpg', 'jpeg', 'png', 'gif', 'bmp']:\n            # Try OCR on images\n            try:\n                # Use OCR to extract text from image\n                image = Image.open(file_path)\n                extracted_text = pytesseract.image_to_string(image)\n                \n                if extracted_text.strip():\n                    extracted_content = extracted_text.strip()\n                    words = extracted_content.split()\n                    \n                    analysis_summary = f\"\"\"\n**REAL IMAGE OCR ANALYSIS - {file_name}**\n\n**Extracted Text from Image:**\n{extracted_content}\n\n**OCR Statistics:**\n- Words Extracted: {len(words)}\n- Characters Extracted: {len(extracted_content)}\n\n**Image Analysis:**\nSuccessfully extracted text content from the image using OCR technology. The image contains readable text that has been processed and analyzed.\n\n**Content Quality:** {\"Good text extraction\" if len(words) > 5 else \"Limited text content detected\"}\n\nThis analysis shows ACTUAL TEXT extracted from the image using OCR.\n\"\"\"\n                else:\n                    analysis_summary = f\"\"\"\n**IMAGE ANALYSIS - {file_name}**\n\nNo readable text was detected in this image using OCR analysis.\n\n**Image Details:**\n- Format: {file_ext.upper()}\n- File Size: {file_size:,} bytes\n\nThe image may contain visual content without text, or the text may not be clear enough for OCR extraction.\n\"\"\"\n                    \n            except Exception as e:\n                analysis_summary = f\"Error processing image with OCR: {str(e)}\"\n                \n        else:\n            analysis_summary = f\"\"\"\n**FILE ANALYSIS - {file_name}**\n\nFile format {file_ext.upper()} is not supported for content extraction.\n\n**File Details:**\n- Format: {file_ext.upper()}\n- Size: {file_size:,} bytes\n\nThis file type requires specialized processing tools for content extraction.\n\"\"\"\n\n        result = {\n            \"status\": \"success\",\n            \"real_analysis\": analysis_summary,\n            \"extracted_content\": extracted_content,\n            \"file_name\": file_name,\n            \"file_size\": file_size,\n            \"content_length\": len(extracted_content) if extracted_content else 0\n        }\n        \n    except Exception as e:\n        result = {\n            \"status\": \"error\",\n            \"error\": f\"Failed to analyze content: {str(e)}\"\n        }\n",
        "config": {
          "timeout": 300,
          "description": "REAL content analysis using document processing libraries"
        },
        "createdBy": "system",
        "createdAt": "2025-09-03T12:59:31.094Z",
        "updatedAt": "2025-09-03T12:59:31.094Z"
      },
      {
        "id": "e0ddfd85-e683-4258-98ef-e70ddb7547bf",
        "type": "email",
        "value": "\nimport json\nfrom datetime import datetime\n\n# Get data from previous steps\nanalysis_data = previous_step_results.get(\"Real Content Analysis\", {}).get(\"result\", {})\n\nif analysis_data.get(\"status\") != \"success\":\n    result = {\n        \"status\": \"error\", \n        \"error\": \"Real content analysis failed\"\n    }\nelse:\n    file_name = analysis_data.get(\"file_name\", \"Document\")\n    real_analysis = analysis_data.get(\"real_analysis\", \"No analysis available\")\n    content_length = analysis_data.get(\"content_length\", 0)\n    \n    subject = f\"📄 REAL Analysis: {file_name}\"\n    \n    # Create HTML email with real analysis\n    html_body = f\"\"\"\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <style>\n        body {{ font-family: 'Segoe UI', sans-serif; margin: 0; padding: 20px; background: #f5f7fa; }}\n        .container {{ max-width: 700px; margin: 0 auto; background: white; border-radius: 12px; overflow: hidden; box-shadow: 0 4px 20px rgba(0,0,0,0.1); }}\n        .header {{ background: linear-gradient(135deg, #28a745 0%, #20c997 100%); color: white; padding: 30px; text-align: center; }}\n        .header h1 {{ margin: 0; font-size: 24px; font-weight: 400; }}\n        .header .badge {{ background: rgba(255,255,255,0.2); padding: 5px 15px; border-radius: 20px; font-size: 14px; margin-top: 10px; display: inline-block; }}\n        .content {{ padding: 30px; }}\n        .file-info {{ background: #e8f5e8; padding: 20px; border-radius: 8px; margin-bottom: 25px; border-left: 4px solid #28a745; }}\n        .analysis-box {{ background: #f8f9fa; padding: 25px; border-radius: 8px; border: 1px solid #dee2e6; }}\n        .analysis-content {{ color: #2c3e50; line-height: 1.8; white-space: pre-line; font-size: 15px; }}\n        .stats {{ display: flex; justify-content: space-around; background: #e9ecef; padding: 15px; border-radius: 8px; margin: 20px 0; }}\n        .stat {{ text-align: center; }}\n        .stat-number {{ font-size: 18px; font-weight: bold; color: #28a745; }}\n        .footer {{ background: #2c3e50; color: white; padding: 20px; text-align: center; font-size: 14px; }}\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>✅ REAL Content Analysis</h1>\n            <div class=\"badge\">Actual Document Processing</div>\n        </div>\n        \n        <div class=\"content\">\n            <div class=\"file-info\">\n                <strong>📄 File:</strong> {file_name}<br>\n                <strong>📊 Content Extracted:</strong> {content_length:,} characters<br>\n                <strong>⏰ Processed:</strong> {datetime.now().strftime('%Y-%m-%d at %H:%M:%S')}\n            </div>\n\n            <div class=\"stats\">\n                <div class=\"stat\">\n                    <div class=\"stat-number\">✅</div>\n                    <div>Real Analysis</div>\n                </div>\n                <div class=\"stat\">\n                    <div class=\"stat-number\">{content_length:,}</div>\n                    <div>Characters</div>\n                </div>\n                <div class=\"stat\">\n                    <div class=\"stat-number\">🔍</div>\n                    <div>Content Based</div>\n                </div>\n            </div>\n\n            <div class=\"analysis-box\">\n                <div class=\"analysis-content\">{real_analysis}</div>\n            </div>\n        </div>\n        \n        <div class=\"footer\">\n            🔍 REAL Document Analysis • No Template Text • Actual Content Processing\n        </div>\n    </div>\n</body>\n</html>\n    \"\"\"\n\n    result = {\n        \"to\": \"avirup.sinha@juspay.in\",\n        \"subject\": subject,\n        \"body\": html_body,\n        \"content_type\": \"text/html\"\n    }\n",
        "config": {
          "recipient": "avirup.sinha@juspay.in",
          "from_email": "aman.asrani@juspay.in",
          "content_type": "html"
        },
        "createdBy": "system",
        "createdAt": "2025-09-03T12:59:31.097Z",
        "updatedAt": "2025-09-03T12:59:31.097Z"
      }
    ]
  }
}
