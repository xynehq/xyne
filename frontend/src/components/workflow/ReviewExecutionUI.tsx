import React, { useState } from "react"
import { Button } from "@/components/ui/button"
import { ArrowLeft, X, CheckCircle, XCircle, Clock, AlertTriangle } from "lucide-react"
import { api } from "../../api"

interface ReviewExecutionUIProps {
  isVisible: boolean
  onBack: () => void
  onClose?: () => void
  stepExecutionId: string
  stepName?: string
  reviewContent?: any
  previousStepResult?: any
  onReviewSubmitted?: () => void // Callback to restart polling
}

const ReviewExecutionUI: React.FC<ReviewExecutionUIProps> = ({
  isVisible,
  onBack,
  onClose,
  stepExecutionId,
  stepName = "Review Step",
  reviewContent,
  previousStepResult,
  onReviewSubmitted,
}) => {
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [submitError, setSubmitError] = useState<string | null>(null)
  const [submissionStatus, setSubmissionStatus] = useState<'pending' | 'approved' | 'rejected' | 'error'>('pending')

  const handleReviewDecision = async (decision: 'approved' | 'rejected') => {
    setIsSubmitting(true)
    setSubmitError(null)

    try {
      const response = await api.post(`/api/v1/workflow/steps/${stepExecutionId}/review`, {
        input: decision
      })

      if (response.data.success) {
        setSubmissionStatus(decision)
        
        // Call the callback to restart workflow polling
        if (onReviewSubmitted) {
          onReviewSubmitted()
        }

        // Auto-close the sidebar after successful submission
        setTimeout(() => {
          if (onClose) {
            onClose()
          }
        }, 2000)
      } else {
        throw new Error(response.data.message || 'Failed to submit review')
      }
    } catch (error: any) {
      console.error('Error submitting review:', error)
      setSubmitError(error.response?.data?.message || error.message || 'Failed to submit review decision')
      setSubmissionStatus('error')
    } finally {
      setIsSubmitting(false)
    }
  }

  const renderReviewContent = () => {
    if (!previousStepResult) {
      return (
        <div className="text-sm text-gray-500 italic">
          No content available for review
        </div>
      )
    }

    // Handle different types of previous step results
    if (typeof previousStepResult === 'string') {
      return (
        <div className="text-sm text-gray-700 whitespace-pre-wrap">
          {previousStepResult}
        </div>
      )
    }

    // Handle form data
    if (previousStepResult.formData) {
      return (
        <div className="space-y-3">
          <h4 className="text-sm font-medium text-gray-900">Form Submission:</h4>
          {Object.entries(previousStepResult.formData).map(([key, value]: [string, any]) => (
            <div key={key} className="border-l-2 border-blue-200 pl-3">
              <div className="text-xs font-medium text-gray-600 uppercase tracking-wide">
                {key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}
              </div>
              <div className="text-sm text-gray-800 mt-1">
                {typeof value === 'object' ? JSON.stringify(value, null, 2) : String(value)}
              </div>
            </div>
          ))}
        </div>
      )
    }

    // Handle AI output
    if (previousStepResult.aiOutput) {
      return (
        <div className="space-y-3">
          <h4 className="text-sm font-medium text-gray-900">AI Generated Content:</h4>
          <div className="bg-gray-50 p-3 rounded-md text-sm text-gray-700 whitespace-pre-wrap">
            {previousStepResult.aiOutput}
          </div>
          {previousStepResult.agentName && (
            <div className="text-xs text-gray-500">
              Generated by: {previousStepResult.agentName}
            </div>
          )}
        </div>
      )
    }

    // Fallback: render as JSON
    return (
      <div className="space-y-3">
        <h4 className="text-sm font-medium text-gray-900">Content for Review:</h4>
        <pre className="bg-gray-50 p-3 rounded-md text-xs text-gray-700 overflow-auto max-h-64">
          {JSON.stringify(previousStepResult, null, 2)}
        </pre>
      </div>
    )
  }

  const getStatusIcon = () => {
    switch (submissionStatus) {
      case 'approved':
        return <CheckCircle className="w-5 h-5 text-green-500" />
      case 'rejected':
        return <XCircle className="w-5 h-5 text-red-500" />
      case 'error':
        return <AlertTriangle className="w-5 h-5 text-orange-500" />
      default:
        return <Clock className="w-5 h-5 text-blue-500" />
    }
  }

  const getStatusMessage = () => {
    switch (submissionStatus) {
      case 'approved':
        return 'Review approved! Workflow will continue with the approval path.'
      case 'rejected':
        return 'Review rejected! Workflow will continue with the rejection path.'
      case 'error':
        return submitError || 'An error occurred while submitting the review.'
      default:
        return 'Please review the content and make a decision.'
    }
  }

  if (!isVisible) return null

  return (
    <div className="fixed inset-y-0 right-0 w-96 bg-white dark:bg-gray-900 shadow-xl border-l border-gray-200 dark:border-gray-700 z-50 flex flex-col">
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700">
        <div className="flex items-center space-x-3">
          <button
            onClick={onBack}
            className="p-1 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-md transition-colors"
          >
            <ArrowLeft className="w-4 h-4" />
          </button>
          {onClose && (
            <button
              onClick={onClose}
              className="p-1 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-md transition-colors"
            >
              <X className="w-4 h-4" />
            </button>
          )}
        </div>
        <div className="text-sm text-slate-500 leading-5 font-normal">
          {stepName}
        </div>
      </div>

      {/* Content */}
      <div className="flex-1 overflow-y-auto p-6 space-y-6">
        {/* Status */}
        <div className="flex items-start space-x-3 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg">
          {getStatusIcon()}
          <div className="flex-1">
            <div className="text-sm font-medium text-gray-900 dark:text-gray-100">
              Review Required
            </div>
            <div className="text-sm text-gray-600 dark:text-gray-400 mt-1">
              {getStatusMessage()}
            </div>
          </div>
        </div>

        {/* Review Content */}
        <div className="space-y-4">
          <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100">
            Content to Review
          </h3>
          <div className="border border-gray-200 dark:border-gray-700 rounded-lg p-4 bg-gray-50 dark:bg-gray-800">
            {renderReviewContent()}
          </div>
        </div>

        {/* Error Message */}
        {submitError && (
          <div className="p-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg">
            <div className="flex items-center space-x-2">
              <AlertTriangle className="w-4 h-4 text-red-500" />
              <div className="text-sm font-medium text-red-800 dark:text-red-200">
                Error
              </div>
            </div>
            <div className="text-sm text-red-700 dark:text-red-300 mt-1">
              {submitError}
            </div>
          </div>
        )}
      </div>

      {/* Action Buttons */}
      {submissionStatus === 'pending' && (
        <div className="p-6 border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800">
          <div className="space-y-3">
            <Button
              onClick={() => handleReviewDecision('approved')}
              disabled={isSubmitting}
              className="w-full bg-green-600 hover:bg-green-700 text-white"
            >
              {isSubmitting ? (
                <div className="flex items-center space-x-2">
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
                  <span>Submitting...</span>
                </div>
              ) : (
                <div className="flex items-center space-x-2">
                  <CheckCircle className="w-4 h-4" />
                  <span>Approve</span>
                </div>
              )}
            </Button>
            
            <Button
              onClick={() => handleReviewDecision('rejected')}
              disabled={isSubmitting}
              variant="outline"
              className="w-full border-red-300 text-red-700 hover:bg-red-50 hover:border-red-400"
            >
              {isSubmitting ? (
                <div className="flex items-center space-x-2">
                  <div className="w-4 h-4 border-2 border-red-600 border-t-transparent rounded-full animate-spin" />
                  <span>Submitting...</span>
                </div>
              ) : (
                <div className="flex items-center space-x-2">
                  <XCircle className="w-4 h-4" />
                  <span>Reject</span>
                </div>
              )}
            </Button>
          </div>
        </div>
      )}

      {/* Success State */}
      {(submissionStatus === 'approved' || submissionStatus === 'rejected') && (
        <div className="p-6 border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800">
          <div className="text-center">
            <div className="text-sm text-gray-600 dark:text-gray-400">
              Review submitted successfully! Workflow will continue automatically.
            </div>
            <Button
              onClick={onClose}
              variant="outline"
              className="mt-3"
            >
              Close
            </Button>
          </div>
        </div>
      )}
    </div>
  )
}

export default ReviewExecutionUI