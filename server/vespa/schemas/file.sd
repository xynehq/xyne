schema file {
  document file {
    field docId type string {
      indexing: attribute | summary
    }
    field app type string {
      indexing: attribute | summary
      attribute: fast-search
      match: exact
    }
    
    field entity type string {
      indexing: attribute | summary
      attribute: fast-search
      match: exact
    }
    field title type string {
      indexing: index | summary | attribute
      index {
        enable-bm25
      }
    }

    # TODO: low weightage url search can also be included
    # maybe higher for subdomain and then lower for the path
    # or we just make the path empty for those that are
    # not good candidates like google drive
    field url type string {
      indexing: summary
    }

    field chunks type array<string> {
      indexing: index | summary
      index: enable-bm25
    }

    field owner type string {
      indexing: attribute | summary
    }

    field ownerEmail type string {
      indexing: attribute | summary
    }

    field photoLink type string {
      indexing: attribute | summary
    }

    field permissions type array<string> {
      indexing: attribute | summary
    }

    field mimeType type string {
      indexing: attribute | summary
    }

    field createdAt type long {
      indexing: attribute | summary
      attribute: fast-search
    }

    field updatedAt type long {
      indexing: attribute | summary
      attribute: fast-search
    }

    field metadata type string {
      indexing: attribute | summary
    }
  }

  field chunk_embeddings type tensor<bfloat16>(p{}, v[DIMS])  {
    indexing: input chunks | embed | attribute | index
    attribute {
        distance-metric: angular
    }
  }
  

  field title_fuzzy type string {
    indexing: input title | index
    index {
      enable-bm25
    }
    match {
      gram
      gram-size: 3
    }
  }

  fieldset default {
    fields: title, app, entity, chunks
  }

  fieldset autocomplete {
    fields: title, app, entity
  }

  rank-profile initial {
    # Inputs for the query vector and alpha for hybrid search
    inputs {
      query(e) tensor<bfloat16>(v[DIMS])  # Query embedding
      query(alpha) double  # Alpha parameter for hybrid weight
    }

    constants {
      THREE_MONTHS_IN_SECONDS: 7890000
      ONE_YEAR_IN_SECONDS: 31536000
      MAX_DOC_DECAY: 0.5
    }

    # custom normalize function
    function scale(val) {
      expression: 2*atan(val/4)/(3.14159)
    }

    function document_age() {
      # Default document age assuming to 3 months when no updateAt timestamp is present
      expression: max(if(isNan(attribute(updatedAt)) == 1, THREE_MONTHS_IN_SECONDS, now() - (attribute(updatedAt) / 1000)) / ONE_YEAR_IN_SECONDS, 0)
    }

    # Document score decays min to 0.5
    function doc_recency() {
      expression: max(1 / (1 + 0.5 * document_age), MAX_DOC_DECAY)
    }

    function vector_score() {
      expression: closeness(field, chunk_embeddings)
    }

    function combined_bm25() {
      expression: bm25(title) + bm25(chunks)
    }

    function matchedFieldCount() {
      expression {
        # The `matches` returns 1 if the field contains a match, otherwise 0
        matches(title) + matches(chunks)
      }
    }

    function combined_nativeRank() {
      expression: (nativeRank(title) + nativeRank(chunks)) / if(matchedFieldCount == 0, 1, matchedFieldCount)
    }

    function chunk_scores() {
      expression: elementwise(bm25(chunks), x, double)
    }
  }

 
  rank-profile default_native inherits initial {

    first-phase {
      expression: (query(alpha) * vector_score) + ((1 - query(alpha)) *  combined_nativeRank)
    }

    global-phase {
      expression {
        (
          (query(alpha) * vector_score) + 
          ((1 - query(alpha)) *  combined_nativeRank)
        )
      }
      rerank-count: 1000
    }

    match-features {
      matchedFieldCount
      vector_score
      combined_nativeRank
      nativeRank(title)
      nativeRank(chunks)
      chunk_scores
      doc_recency
    }
  }

  # will be use for single schema query
  rank-profile default_bm25 inherits initial {

    first-phase {
      expression {
        (
          (query(alpha) * vector_score) + ((1 - query(alpha)) * combined_bm25)
        )
      }
    }

    global-phase {
      expression {
        (
          (query(alpha) * vector_score) +
          ((1 - query(alpha)) * scale(combined_bm25))
        )
      }
      rerank-count: 1000
    }

     match-features {
      vector_score
      bm25(chunks)
      bm25(title)
      scale(combined_bm25)
      chunk_scores
    }
  }

  # change here for ai queries accordingly
  rank-profile default_ai inherits initial {

    first-phase {
      expression: (query(alpha) * vector_score) + ((1 - query(alpha)) *  combined_nativeRank)
    }

    global-phase {
      expression {
        (
          (query(alpha) * vector_score) + 
          ((1 - query(alpha)) *  combined_nativeRank)
        )
      }
      rerank-count: 1000
    }

    match-features {
      vector_score
      combined_nativeRank
      nativeRank(title)
      nativeRank(chunks)
      chunk_scores
      doc_recency
    }
  }

  document-summary default {
    summary chunks_summary {
      bolding: on
      source: chunks
    }
  }

  document-summary autocomplete {
    summary title {
        source: title
    }
    summary app {
        source: app
    }
    summary entity {
        source: entity
    }
    summary docId {
        source: docId
    }
  }

  # Autocomplete rank profile for fuzzy prefix search
  rank-profile autocomplete {
    first-phase {
      expression: bm25(title_fuzzy)
    }
    match-features {
      bm25(title_fuzzy)
    }
  }
}