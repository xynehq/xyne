schema chatAttachment {
  document chatAttachment {
    field docId type string {
      indexing: attribute | summary
    }
    
    field title type string {
      indexing: index | summary | attribute
      index {
        enable-bm25
      }
    }

    field chunks type array<string> {
      indexing: index | summary
      index: enable-bm25
    }

    field ownerEmail type string {
      indexing: attribute | summary
    }

    field mimeType type string {
      indexing: attribute | summary
    }

    field createdAt type long {
      indexing: attribute | summary
      attribute: fast-search
    }

    field updatedAt type long {
      indexing: attribute | summary
      attribute: fast-search
    }

    field chatId type string {
      indexing: attribute | summary
      attribute: fast-search
      match: exact
    }
    
    field messageId type string {
      indexing: attribute | summary
      attribute: fast-search
      match: exact
    }
  }

  field chunk_embeddings type tensor<bfloat16>(p{}, v[384])  {
    indexing: input chunks | embed | attribute | index
    attribute {
        distance-metric: angular
    }
  }
  
  fieldset default {
    fields: title, chunks
  }

  # Hybrid search rank profile combining BM25 for title and chunks, and vector search for chunk embeddings
  rank-profile initial {
    # Inputs for the query vector and alpha for hybrid search
    inputs {
      query(e) tensor<bfloat16>(v[384])  # Query embedding
      query(alpha) double  # Alpha parameter for hybrid weight
    }

    # Compute vector similarity for chunks
    function chunk_vector_score() {
      expression: closeness(field, chunk_embeddings)
    }

    # Compute BM25 score for title
    function title_bm25_score() {
      expression: bm25(title)
    }

    # First phase combines BM25 (title and chunks) and vector similarity (chunks)
    first-phase {
      expression: (query(alpha) * chunk_vector_score) + ((1 - query(alpha)) * (bm25(chunks) +bm25(title)))
    }

    # Global phase (optional if more complex reranking is needed)
    global-phase {
      expression {
        (
          (query(alpha) * normalize_linear(chunk_vector_score)) +
          ((1 - query(alpha)) * (normalize_linear(bm25(chunks)) + normalize_linear(bm25(title))))
        )
      }
      rerank-count: 1000
    }

    match-features {
      bm25(title)
      bm25(chunks)
      closeness(field, chunk_embeddings)
    }
  }

  rank-profile default inherits initial {
    function chunk_vector_score() {
      expression: closeness(field, chunk_embeddings)
    }

    function scale(val) {
      expression: 2*atan(val/4)/(3.14159)
    }

    function scaled_bm25_chunks() {
      expression: scale(bm25(chunks))
    }

    function scaled_bm25_title() {
      expression: scale(bm25(title))
    }

    function combined_bm25() {
      expression: 0.3*scaled_bm25_chunks + 0.8*scaled_bm25_title
    }

    # First phase combines BM25 (title and chunks) and vector similarity (chunks)
    first-phase {
      expression: (0.5 * chunk_vector_score) + combined_bm25
    }

    global-phase {
      expression {
        (
          (0.5 * normalize_linear(chunk_vector_score)) +
          (max(scaled_bm25_title,scaled_bm25_chunks))
        )
      }
      rerank-count: 1000
    }

    match-features {
      chunk_vector_score
      scaled_bm25_chunks
      scaled_bm25_title
    }
  }

  document-summary default {
    summary chunks_summary {
      bolding: on
      source: chunks
    }
  }
}