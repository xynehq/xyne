schema mail_attachment {
  document mail_attachment {
    # basically the attachmentId
    field docId type string {
      indexing: attribute | summary
      attribute: fast-search
    }

    field threadId type string {
      indexing: attribute | summary
      attribute: fast-search
    }

    field mailId type string {
      indexing: attribute | summary
      attribute: fast-search
    }

    field app type string {
      indexing: attribute | summary
      attribute: fast-search
      match: exact
    }

    field entity type string {
      indexing: attribute | summary
      attribute: fast-search
      match: exact
    }

    field filename type string {
      indexing: summary | index
      index: enable-bm25
    }

    field fileType type string {
      indexing: summary | attribute
    }

     field fileSize type long {
      indexing: summary | attribute
    }

    field partId type long {
      indexing: summary | attribute
    }

    field chunks type array<string> {
      indexing: index | summary
      index {
        enable-bm25
      }
    }

    field timestamp type long {
      indexing: attribute | summary
      attribute: fast-search
    }

    field permissions type array<string> {
      indexing: attribute | summary
    }
    
  }

  field chunk_embeddings type tensor<bfloat16>(p{}, v[384])  {
    indexing: guard { input chunks } | embed | attribute | index
    attribute {
      distance-metric: angular
    }
  }

  field filename_embeddings type tensor<bfloat16>(v[384])  {
    indexing: input filename | embed | attribute | index
    attribute {
        distance-metric: angular
    }
  }

  # filename
  field name_fuzzy type string {
    indexing: input filename | index
    index {
      enable-bm25
    }
    match {
      gram
      gram-size: 3
    }
  }

  fieldset default {
    fields: filename, chunks
  }

  fieldset autocomplete {
    fields: filename
  }

  rank-profile default {
    inputs {
      query(e) tensor<bfloat16>(v[384])
      query(alpha) double
      query(bm25ChunkWeight) double 
    }

    constants {
      THREE_MONTHS_IN_SECONDS: 7890000
      ONE_YEAR_IN_SECONDS: 31536000
      MAX_DOC_DECAY: 0.5
    }

    function scale(val) {
      expression: 2*atan(val/4)/(3.14159)
    }
    
    function document_age() {
      # Default document age assuming to 3 months when no timestamp is present
      expression: max(if(isNan(attribute(timestamp)) == 1, THREE_MONTHS_IN_SECONDS, now() - (attribute(timestamp) / 1000)) / ONE_YEAR_IN_SECONDS, 0)
    }

    # Document score decays min to 0.5
    function doc_recency() {
        expression: max(1 / (1 + 0.5 * document_age), MAX_DOC_DECAY)
    }

    function chunk_vector_score() {
      expression: closeness(field, chunk_embeddings)
    }

    function filename_vector_score() {
      expression: closeness(field, filename_embeddings)
    }

    function vector_score() {
      # taking whichever has a good matching
      expression: max(chunk_vector_score,filename_vector_score)
    }

    function scaled_bm25_chunks() {
      expression: scale(bm25(chunks))
    }

    function scaled_bm25_filename() {
      expression: scale(bm25(filename))
    }

    function combined_bm25() {
      expression: (query(bm25ChunkWeight) * scaled_bm25_chunks) + scaled_bm25_filename
    }

    first-phase {
      expression: (query(alpha) * scale(vector_score)) + ((1 - query(alpha)) * scale(combined_bm25))
    }

    global-phase {
      expression {
        (
          (query(alpha) * scale(vector_score)) +
          ((1 - query(alpha)) * max(scaled_bm25_filename,(query(bm25ChunkWeight) * scaled_bm25_chunks)))
        ) * doc_recency
      }
      rerank-count: 1000
    }

    match-features {
      chunk_vector_score
      filename_vector_score
      scaled_bm25_chunks
      scaled_bm25_filename
      doc_recency
      query(alpha)
      query(bm25ChunkWeight)
    }
  }

  document-summary default {
    summary filename {}
    summary chunks_summary {
      bolding: on
      source: chunks
    }
  }

  document-summary autocomplete {
    summary docId {}
    summary filename {}
    summary fileType {}
    summary app {}
    summary entity {}
  }

  rank-profile autocomplete {
    first-phase {
      expression: bm25(filename)
    }
    match-features {
      bm25(filename)
    }
  }
}