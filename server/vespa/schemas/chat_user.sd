schema chat_user {
    document chat_user {
        field docId type string {
            indexing: attribute | summary
        }

        field teamId type string {
            indexing: attribute | summary
        }

        field name type string {
            indexing: index | attribute | summary
            index: enable-bm25
        }

        field title type string {
            indexing: index | attribute | summary
            index: enable-bm25
        }

        field email type string {
            indexing: index | attribute | summary
            index: enable-bm25
        }

        # App & Entity Fields
        field app type string {
            indexing: attribute | summary
            attribute: fast-search
            match: exact
        }

        field entity type string {
            indexing: attribute | summary
            attribute: fast-search
            match: exact
        }

        # Status Fields
        field statusText type string {
            indexing: index | attribute | summary
            index: enable-bm25
        }

        field image type string {
            indexing: attribute | summary
        }

        # Timezone Fields
        field tz type string {
            indexing: attribute | summary
        }

        # Boolean Flags
        field isAdmin type bool {
            indexing: attribute | summary
        }

        field deleted type bool {
            indexing: attribute | summary
        }

        field updatedAt type long {
            indexing: attribute | summary
            attribute: fast-search
        }

        field permissions type array<string> {
            indexing: attribute | summary
        }
    }

    # Fuzzy matching fields
    field name_fuzzy type string {
        indexing: input name | index
        index: enable-bm25
        match {
            gram
            gram-size: 3
        }
    }

    field email_fuzzy type string {
        indexing: input email | index
        index: enable-bm25
        match {
            gram
            gram-size: 3
        }
    }

    # Field sets for search
    fieldset default {
        fields: name, email, title, statusText
    }

    document-summary autocomplete {
        summary name {
            source: name
        }
        summary email {
            source: email
        }
        summary app {
            source: app
        }
        summary entity {
            source: entity
        }
        summary image {
            source: image
        }
    }

    fieldset autocomplete {
        fields: name, email, app, entity, image
    }


    rank-profile initial {
        inputs {
            query(e) tensor<bfloat16>(v[DIMS])
            query(alpha) double
        }

        function scale(val) {
            expression: 2*atan(val/4)/(3.14159)
        }

        function freshness_score() {
            expression: exp(-1 * (now() - attribute(updatedAt)) / (3600 * 24))
        }

        function combined_bm25() {
            expression {
                bm25(name) +
                bm25(email) +
                bm25(statusText) +
                bm25(title)
            }
        }

        function combined_nativeRank(){
            expression: nativeRank(name,email,statusText,title)
        }
    }

    # Ranking profiles
    rank-profile default_native inherits initial {
        
        # Increase the score by 10x to ensure consistency with other schemas
        first-phase {
          expression: (10 * combined_nativeRank)
        }

        global-phase {
          expression :  (10 * combined_nativeRank)
          rerank-count: 1000
        }

        match-features {
          combined_nativeRank
          nativeRank(name)
          nativeRank(email)
          nativeRank(statusText)
          nativeRank(title)
        }
    }

    # will be use for single schema query
    rank-profile default_bm25 inherits initial {
        
        first-phase {
          expression: combined_bm25
        }

        global-phase {
          expression : scale(combined_bm25)
          rerank-count: 1000
        }

        match-features {
          scale(combined_bm25)
          bm25(name)
          bm25(email)
          bm25(statusText)
          bm25(title)
        }
    }

    # change here for ai queries accordingly
    rank-profile default_ai inherits initial {
        
        # Increase the score by 10x to ensure consistency with other schemas
        first-phase {
          expression: (10 * combined_nativeRank)
        }

        global-phase {
          expression :  (10 * combined_nativeRank)
          rerank-count: 1000
        }

        match-features {
          combined_nativeRank
          nativeRank(name)
          nativeRank(email)
          nativeRank(statusText)
          nativeRank(title)
        }
    }


    # Autocomplete profile
    rank-profile autocomplete inherits default {
        first-phase {
            expression: bm25(name_fuzzy) + bm25(email_fuzzy)
        }
    }
}