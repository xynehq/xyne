# this is created for slack channel
# in future same can be used for other apps that have this
# channel like concept
schema chat_container {
    document chat_container {
        # channel id
        field docId type string {
            indexing: attribute | summary
        }

        field name type string {
            indexing: index | attribute | summary
            index: enable-bm25
        }

        # non indexed name for chat_message import
        field channelName type string {
            indexing: attribute | summary
        }

        field teamId type string {
            indexing: attribute | summary
        }

        field creator type string {
            indexing: attribute | summary
        }

        field app type string {
            indexing: attribute | summary
            attribute: fast-search
            match: exact
        }
    
        # dm
        field isIm type bool {
            indexing: attribute | summary
        }

        # group dm
        field isMpim type bool {
            indexing: attribute | summary
        }

        field permissions type array<string> {
            indexing: attribute | summary
            attribute: fast-search
        }

        field isPrivate type bool {
            indexing: attribute | summary
        }

        field createdAt type long {
            indexing: attribute | summary
            attribute: fast-search
        }

        field updatedAt type long {
            indexing: attribute | summary
            attribute: fast-search
        }

        field topic type string {
            indexing: index | attribute | summary
            index: enable-bm25
        }

        field description type string {
            indexing: index | attribute | summary
            index: enable-bm25
        }

        field isArchived type bool {
            indexing: attribute | summary
        }

        field isGeneral type bool {
            indexing: attribute | summary
        }

        # member count
        field count type int {
            indexing: attribute | summary
        }
    }

    field name_fuzzy type string {
        indexing: input name | index
        index: enable-bm25
        match {
            gram
            gram-size: 3
        }
    }

    field chunk_embeddings type tensor<bfloat16>(v[DIMS]) {
        indexing: (input name || "") . " " . (input topic || "") . " " . (input description || "") | embed | attribute | index
        attribute {
            distance-metric: angular
        }
    }

    fieldset default {
        fields: name, topic, description
    }

    rank-profile initial {
        inputs {
            query(e) tensor<bfloat16>(v[DIMS])
            query(alpha) double 
        }

        function scale(val) {
            expression: 2*atan(val/4)/(3.14159)
        }
        
        function freshness_score() {
            expression: exp(-1 * (now() - attribute(updatedAt)) / (3600 * 24))
        }

        function vector_score() {
            expression: closeness(field, chunk_embeddings)
        }

        function combined_bm25() {
            expression: bm25(name) + bm25(topic) + bm25(description)
        }

        function matchedFieldCount() {
            expression {
                 # The `matches` returns 1 if the field contains a match, otherwise 0
                 matches(name) + matches(topic) + matches(description)
            }
        }

        function combined_nativeRank() {
            expression {
                (
                    nativeRank(name) + 
                    nativeRank(topic) + 
                    nativeRank(description)
                ) / if(matchedFieldCount == 0, 1, matchedFieldCount)
            }
        }

    }

    rank-profile default_native inherits initial {

        first-phase {
          expression: (query(alpha) * vector_score) + ((1 - query(alpha)) * combined_nativeRank)
        }

        global-phase {
          expression {
            (
              (query(alpha) * vector_score) + 
              ((1 - query(alpha)) *  combined_nativeRank)
            )
          }
          rerank-count: 1000
        }

        match-features {
          matchedFieldCount
          vector_score
          combined_nativeRank
          nativeRank(name)
          nativeRank(topic)
          nativeRank(description)
        }
    }

    # will be use for single schema query
    rank-profile default_bm25 inherits initial {


        first-phase {
          expression: (query(alpha) * vector_score) + ((1 - query(alpha)) * combined_bm25)
        }

        global-phase {
          expression {
            (
              (query(alpha) * vector_score) + 
              ((1 - query(alpha)) * scale(combined_bm25))
            )
          }
          rerank-count: 1000
        }

        match-features {
          vector_score
          bm25(name)
          bm25(topic)
          bm25(description)
          scale(combined_bm25)
        }
    }

    # change here for ai queries accordingly
    rank-profile default_ai inherits initial {

        first-phase {
          expression: (query(alpha) * vector_score) + ((1 - query(alpha)) * combined_nativeRank)
        }

        global-phase {
          expression {
            (
              (query(alpha) * vector_score) + 
              ((1 - query(alpha)) *  combined_nativeRank)
            )
          }
          rerank-count: 1000
        }

        match-features {
          vector_score
          combined_nativeRank
          nativeRank(name)
          nativeRank(topic)
          nativeRank(description)
        }
    }

    rank-profile autocomplete inherits default {
        first-phase {
            expression: bm25(name_fuzzy)
        }
    }
}