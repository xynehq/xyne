schema user {
    document user {

        field docId type string {
            indexing: attribute | summary
        }
        field name type string {
            indexing: index | attribute | summary
            index {
                enable-bm25
            }
        }

        # primary email
        field email type string {
            indexing: index | attribute | summary
            index {
                enable-bm25
            }
        }
        field app type string {
            indexing: attribute | summary
            attribute: fast-search
            match: exact
        }

        field entity type string {
            indexing: attribute | summary
            attribute: fast-search
            match: exact
        }

        field gender type string {
            indexing: attribute | summary
        }

        field photoLink type string {
            indexing: attribute | summary
        }

        field aliases type array<string> {
            indexing: attribute | summary
        }

        field language type string {
            indexing: attribute | summary
        }

        # is the user globally visible
        field includeInGlobalAddressList type bool {
            indexing: attribute | summary
        }

        # list of websites associated with the contact
        field urls type array<string> {
            indexing: attribute | summary
        }

        # from the organization object
        field orgName type string {
            indexing: attribute | summary
        }

        field orgJobTitle type string {
            indexing: attribute | summary
        }

        field orgDepartment type string {
            indexing: attribute | summary
        }
        field orgLocation type string {
            indexing: attribute | summary
        }

        field orgDescription type string {
            indexing: attribute | summary
        }

        field isAdmin type bool {
            indexing: attribute | summary
        }

        field isDelegatedAdmin type bool {
            indexing: attribute | summary
        }

        field suspended type bool {
            indexing: summary | attribute
        }

        field archived type bool {
            indexing: summary | attribute
        }

        field creationTime type long {
            indexing: summary | attribute
            attribute: fast-search
        }
        field lastLoggedIn type long {
            indexing: summary | attribute
            attribute: fast-search
        }
        # such sensitive fields we can encrypt
        # and keep in our own db as metadata
        # or fetch from api when needed
        # field phoneNumbers type array<string> {
        #     indexing: attribute | summary
        # }

        field birthday type long {
            indexing: attribute | summary
        }

        field occupations type array<string> {
            indexing: attribute | summary
        }

        # can become a catch-all field
        # user adds their own custom fields
        field userDefined type array<string> {
            indexing: attribute | summary
        }

        # for directory users
        field customerId type string {
            indexing: attribute | summary
        }

        # external apps store data here
        field clientData type array<string> {
            indexing: attribute | summary
        }

        # we just put the email
        # for who has this contact
        field owner type string {
            indexing: index | attribute | summary
            match: exact
        }
    }

    field chunk_embeddings type tensor<bfloat16>(v[DIMS])  {
        indexing: (input name || "") . " " .(input email || "") | embed | attribute | index
        attribute {
            distance-metric: angular
        }
    }

    # Fuzzy matching for the 'name' field
    field name_fuzzy type string {
        indexing: input name | index
        index {
            enable-bm25
        }
        match {
            gram
            gram-size: 3
        }
    }

    # Fuzzy matching for the 'email' field
    field email_fuzzy type string {
        indexing: input email | index
        index {
            enable-bm25
        }
        match {
            gram
            gram-size: 3
        }
    }

    document-summary autocomplete {
        summary name {
            source: name
        }
        summary email {
            source: email
        }
        summary app {
            source: app
        }
        summary entity {
            source: entity
        }
        summary photoLink {
            source: photoLink
        }
    }

    fieldset autocomplete {
        fields: name, email, app, entity, photoLink
    }

    fieldset default {
        fields: name, email, app, entity, photoLink, creationTime
    }

    rank-profile initial {
       inputs {
            query(e) tensor<bfloat16>(v[DIMS])
            query(alpha) double 
        }

        function scale(val) {
            expression: 2*atan(val/4)/(3.14159)
        }

        function combined_bm25(){
            expression: bm25(name) + bm25(email)
        }
        
        function matchedFieldCount() {
            expression {
                # The `matches` returns 1 if the field contains a match, otherwise 0
                matches(name) + matches(email)
            }
        }

        function combined_nativeRank(){
            expression: (nativeRank(name) +  nativeRank(email)) / if(matchedFieldCount == 0, 1, matchedFieldCount)
        }

        function vector_score() {
            expression: closeness(field, chunk_embeddings)
        }
    }

    rank-profile default_native inherits initial {
        # slight boost for people
        global-phase {
            expression: 1.2 * ((query(alpha) * vector_score) + ((1 - query(alpha)) *  combined_nativeRank))
        }

        match-features {
            matchedFieldCount
            nativeRank(name)
            nativeRank(email)
            vector_score
        }
    }

    # New rank profile designed for sorting: implements recency binning with hybrid scoring within bins.
    rank-profile global_sorted inherits initial {
        # Query inputs allowing control over recency parameters
        inputs {
            # query(e) and query(alpha) are inherited from 'initial'
            query(bin_size_days) double: 1.0
        }

        # Constants for recency binning
        constants {
            ONE_DAY_IN_SECONDS: 86400.0
            THREE_MONTHS_IN_SECONDS: 7890000 
            RECENCY_BIN_MULTIPLIER: 1000000.0
            MAX_SCORE_BASE: 1000000000.0
        }

        # Calculate document age in days with proper handling of missing timestamps
        # Using lastLoggedIn for user, assuming it's in milliseconds
        function document_age_days() {
          expression: max(0.0, if(isNan(attribute(lastLoggedIn)) == 1, THREE_MONTHS_IN_SECONDS / ONE_DAY_IN_SECONDS, (now() - (attribute(lastLoggedIn) / 1000)) / ONE_DAY_IN_SECONDS))
        }

        # Assign documents to time-based bins
        function recency_bin_index() {
          expression: floor(document_age_days() / query(bin_size_days))
        }

        # Score based on recency bin - newer bins get MUCH higher scores
        function recency_bin_score() {
          expression: MAX_SCORE_BASE - (recency_bin_index() * RECENCY_BIN_MULTIPLIER)
        }

        # Calculate the hybrid relevance score (combining vector and lexical search)
        function hybrid_relevance_score() {
          expression: (query(alpha) * vector_score()) + ((1 - query(alpha)) * combined_nativeRank)
        }

        # --- Ranking Expression ---
        first-phase {
          # Final score = Score from recency bin + full hybrid relevance score
          expression: recency_bin_score() + hybrid_relevance_score()
        }

        # Include all relevant features for debugging/monitoring
        match-features {
          query(alpha)
          vector_score
          combined_nativeRank
          matchedFieldCount # Make sure matchedFieldCount is defined in 'initial' or here if used
          # Specific nativeRank fields for user
          nativeRank(name)
          nativeRank(email)
          document_age_days
          recency_bin_index
          recency_bin_score
          hybrid_relevance_score
        }
    }

    rank-profile default_bm25 inherits initial {

        global-phase {
            expression: scale(combined_bm25)
        }

        match-features {
            scale(combined_bm25)
            bm25(name)
            bm25(email)
        }
    }

    # change here for ai queries accordingly
    rank-profile default_ai inherits initial {
        global-phase {
            expression: combined_nativeRank
        }

        match-features {
            nativeRank(name)
            nativeRank(email)
        }
    }

    rank-profile default_random inherits initial {
        first-phase {
            expression: random.match
        }

        match-features {
            matchedFieldCount
            nativeRank(name)
            nativeRank(email)
            vector_score
        }
    }

     rank-profile autocomplete {
        first-phase {
            expression: bm25(name_fuzzy) + bm25(email_fuzzy)
        }
        match-features {
            bm25(name_fuzzy)
            bm25(email_fuzzy)
        }
    }
}