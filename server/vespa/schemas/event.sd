schema event {
    document event {
        #eventId
        field docId type string {
            indexing: attribute | summary
        }

        field name type string {
            indexing: index | attribute | summary
            index: enable-bm25
        }
        
        #eventDescription
        field description type string {
            indexing: index | attribute | summary
            index: enable-bm25
        }

        # eventLink, different from joining link
        field url type string {
            indexing: index | attribute | summary
            match: exact
        }

        # baseUrl of joiningLink to know which app is the meeting on
        field baseUrl type string {
            indexing: attribute | summary
            attribute: fast-search
            index: enable-bm25
        }

        # eventStatus
        field status type string {
            indexing: attribute | summary
            attribute: fast-search
        }
        
        field location type string {
            indexing: attribute | summary
            attribute: fast-search
        }

        field createdAt type long {
            indexing: attribute | summary
            attribute: fast-search
        }

        field updatedAt type long {
            indexing: attribute | summary
            attribute: fast-search
        }

        field app type string {
            indexing: attribute | summary
            attribute: fast-search
            match: exact
        }

        field entity type string {
            indexing: attribute | summary
            attribute: fast-search
            match: exact
        }

        # A user can be creator, organizer or an attendee
        struct user_info {
            field email type string {}
            field displayName type string {}
        }
        
        # Event creator
        field creator type user_info {
            indexing: summary
        }
        
        # Event Organizer
        field organizer type user_info {
            indexing: summary
        }

        # Event Attendees
        field attendeesNames type array<string> {
            indexing: index | attribute | summary
            index: enable-bm25
        }

        field attendees type array<user_info> {
            indexing: summary
        }

        field startTime type long {
            indexing: attribute | summary
            attribute: fast-search
        }
        
        field endTime type long {
            indexing: attribute | summary
            attribute: fast-search
        }

        field attachmentFilenames type array<string> {
            indexing: index | attribute | summary
            index: enable-bm25
        }

        struct attachment {
            field fileId type string {}
            field title type string {}
            field fileUrl type string {}
            field mimeType type string {}
        }

        # An event can have attachments from Google Drive
        field attachments type array<attachment> {}

        field recurrence type array<string> {}

        # Google Meet link or any meeting link from the description
        field joiningLink type string {
            indexing: attribute | summary
        }

        field permissions type array<string> {
            indexing: attribute | summary
        }

        field cancelledInstances type array<string> {
            indexing: attribute | summary
        }

        # To know if startTime of event available or defaultStartTime being used
        field defaultStartTime type bool {
            indexing: attribute | summary
        }
    }

     field chunk_embeddings type tensor<bfloat16>(v[DIMS])  {
        indexing: (input name || "") . " " .(input description || ""). " " .((input attachmentFilenames | for_each { _ }) . " " || ""). " " .(input url || "") | embed | attribute | index
        attribute {
            distance-metric: angular
        }
    }

    field name_fuzzy type string {
        indexing: input name | index
        index {
          enable-bm25
        }
        match {
          gram
          gram-size: 3
        }
    }

    fieldset default {
        fields: name, description, attachmentFilenames, attendeesNames, app, url, baseUrl, attendees
    }

    rank-profile initial {
        inputs {
            query(e) tensor<bfloat16>(v[DIMS])
            query(alpha) double 
            query(recency_decay_rate) double
        }

        constants {
            THREE_MONTHS_IN_SECONDS: 7776000
            ONE_YEAR_IN_SECONDS: 31536000
            MAX_DOC_DECAY: 0.5
            META_FIELDS_DECAY: 0.2
        }

        function scale(val) {
            expression: 2*atan(val/4)/(3.14159)
        }

        function document_age() {
            # Default document age assuming to 3 months when no updatedAt timestamp is present
            expression: max(if(isNan(attribute(updatedAt)) == 1, THREE_MONTHS_IN_SECONDS, now() - (attribute(updatedAt) / 1000)) / ONE_YEAR_IN_SECONDS, 0)
        }

        # Document score decays min to 0.5
        function doc_recency() {
            expression: max(1 / (1 + query(recency_decay_rate) * sqrt(document_age)), MAX_DOC_DECAY)
        }

        function vector_score() {
            expression: closeness(field, chunk_embeddings)
        }

        # reducing weightage for metadata fields
        function combined_bm25() {
            expression {
                (bm25(name) + bm25(url) + bm25(description)) +
                (META_FIELDS_DECAY * (bm25(attachmentFilenames) + bm25(attendeesNames)))
            }
        }

        function matchedFieldCount() {
            expression {
                 # The `matches` returns 1 if the field contains a match, otherwise 0
                 matches(name) + matches(description) + matches(url)
            }
        }

        function combined_nativeRank() {
            expression {
                (
                    (
                        nativeRank(name) + 
                        nativeRank(description) + 
                        nativeRank(url)
                    ) / if(matchedFieldCount == 0, 1, matchedFieldCount)
                ) 
                +
                (META_FIELDS_DECAY * (nativeRank(attachmentFilenames) + nativeRank(attendeesNames)))
            }
        }
    }

    rank-profile default_native inherits initial {
              
        first-phase {
            expression: (query(alpha) * vector_score) + ((1 - query(alpha)) *  combined_nativeRank)
        }

        global-phase {
            expression {
              (
                (query(alpha) * vector_score) + 
                ((1 - query(alpha)) *  combined_nativeRank)
              ) * doc_recency
            }
            rerank-count: 1000
        }

        match-features {
          doc_recency
          matchedFieldCount
          combined_nativeRank
          vector_score
          nativeRank(name)
          nativeRank(description)
          nativeRank(attachmentFilenames)
          nativeRank(attendeesNames)
        }
    }

    # New rank profile designed for sorting: implements recency binning with hybrid scoring within bins.
    rank-profile global_sorted inherits initial {
        # Query inputs allowing control over recency parameters
        inputs {
            # query(e) and query(alpha) are inherited from 'initial'
            query(bin_size_days) double: 1.0
        }

        # Constants for recency binning
        constants {
            ONE_DAY_IN_SECONDS: 86400.0
            THREE_MONTHS_IN_SECONDS: 7890000 # Using a default, consider if event schema needs different
            # Using a large multiplier ensures bin differences dominate
            RECENCY_BIN_MULTIPLIER: 1000000.0
            # Base score high enough to accommodate many bins
            MAX_SCORE_BASE: 1000000000.0
        }

        # Calculate document age in days with proper handling of missing timestamps
        # Using startTime for events, assuming it's in milliseconds
        function document_age_days() {
          expression: max(0.0, if(isNan(attribute(startTime)) == 1, THREE_MONTHS_IN_SECONDS / ONE_DAY_IN_SECONDS, (now() - (attribute(startTime) / 1000)) / ONE_DAY_IN_SECONDS))
        }

        # Assign documents to time-based bins
        function recency_bin_index() {
          expression: floor(document_age_days() / query(bin_size_days))
        }

        # Score based on recency bin - newer bins get MUCH higher scores
        function recency_bin_score() {
          expression: MAX_SCORE_BASE - (recency_bin_index() * RECENCY_BIN_MULTIPLIER)
        }

        # Calculate the hybrid relevance score (combining vector and lexical search)
        function hybrid_relevance_score() {
          expression: (query(alpha) * vector_score()) + ((1 - query(alpha)) * combined_nativeRank)
        }

        # --- Ranking Expression ---
        first-phase {
          # Final score = Score from recency bin + full hybrid relevance score
          expression: recency_bin_score() + hybrid_relevance_score()
        }

        # Include all relevant features for debugging/monitoring
        match-features {
          query(alpha)
          vector_score
          combined_nativeRank
          matchedFieldCount
          # Specific nativeRank fields for event
          nativeRank(name)
          nativeRank(description)
          nativeRank(attachmentFilenames)
          nativeRank(attendeesNames)
          document_age_days
          recency_bin_index
          recency_bin_score
          hybrid_relevance_score
        }
    }

    # will be use for single schema query
    rank-profile default_bm25 inherits initial {

        first-phase {
          expression {
            (
              (query(alpha) * vector_score) + ((1 - query(alpha)) * combined_bm25)
            )
          }
        }

        global-phase {
          expression {
            (
              (query(alpha) * vector_score) +
              ((1 - query(alpha)) * scale(combined_bm25))
            )
          }
          rerank-count: 1000
        }

         match-features {
          vector_score
          scale(bm25(name))
          scale(bm25(description))
          scale(bm25(attachmentFilenames))
          scale(bm25(attendeesNames))
          scale(combined_bm25)
        }
    }


    # change here for ai queries accordingly
    rank-profile default_ai inherits initial {
             
        first-phase {
            expression: (query(alpha) * vector_score) + ((1 - query(alpha)) *  combined_nativeRank)
        }

        global-phase {
            expression {
              (
                (query(alpha) * vector_score) + 
                ((1 - query(alpha)) *  combined_nativeRank)
              )
            }
            rerank-count: 1000
        }

        match-features {
          combined_nativeRank
          vector_score
          nativeRank(name)
          nativeRank(description)
          nativeRank(attachmentFilenames)
          nativeRank(attendeesNames)
        }
    }
    rank-profile default_random inherits initial {
        first-phase {
            expression: random.match
        }

        match-features {
          combined_nativeRank
          vector_score
          nativeRank(name)
          nativeRank(description)
          nativeRank(attachmentFilenames)
          nativeRank(attendeesNames)
        }
    }
    
    document-summary default {
        summary description {
            bolding: on
        }
    }

    document-summary autocomplete {
        summary name {
            source: name
        }

        summary app {
            source: app
        }
        summary entity {
            source: entity
        }
        summary docId {
            source: docId
        }
    }

    # Autocomplete rank profile for fuzzy prefix search
    rank-profile autocomplete {
      first-phase {
        expression: bm25(name_fuzzy)
      }
      match-features {
        bm25(name_fuzzy)
      }
    }
}
