schema event {
    document event {
        #eventId
        field docId type string {
            indexing: attribute | summary
        }

        field name type string {
            indexing: index | attribute | summary
            index: enable-bm25
        }
        
        #eventDescription
        field description type string {
            indexing: index | attribute | summary
            index: enable-bm25
        }

        # eventLink, different from joining link
        field url type string {
            indexing: index | attribute | summary
            match: exact
        }

        # baseUrl of joiningLink to know which app is the meeting on
        field baseUrl type string {
            indexing: attribute | summary
            attribute: fast-search
            index: enable-bm25
        }

        # eventStatus
        field status type string {
            indexing: attribute | summary
            attribute: fast-search
        }
        
        field location type string {
            indexing: attribute | summary
            attribute: fast-search
        }

        field createdAt type long {
            indexing: attribute | summary
            attribute: fast-search
        }

        field updatedAt type long {
            indexing: attribute | summary
            attribute: fast-search
        }

        field app type string {
            indexing: attribute | summary
            attribute: fast-search
            match: exact
        }

        field entity type string {
            indexing: attribute | summary
            attribute: fast-search
            match: exact
        }

        # A user can be creator, organizer or an attendee
        struct user_info {
            field email type string {}
            field displayName type string {}
        }
        
        # Event creator
        field creator type user_info {
            indexing: summary
        }
        
        # Event Organizer
        field organizer type user_info {
            indexing: summary
        }

        # Event Attendees
        field attendeesNames type array<string> {
            indexing: index | attribute | summary
            index: enable-bm25
        }

        field attendees type array<user_info> {
            indexing: summary
        }

        field startTime type long {
            indexing: attribute | summary
            attribute: fast-search
        }
        
        field endTime type long {
            indexing: attribute | summary
            attribute: fast-search
        }

        field attachmentFilenames type array<string> {
            indexing: index | attribute | summary
            index: enable-bm25
        }

        struct attachment {
            field fileId type string {}
            field title type string {}
            field fileUrl type string {}
            field mimeType type string {}
        }

        # An event can have attachments from Google Drive
        field attachments type array<attachment> {}

        field recurrence type array<string> {}

        # Google Meet link or any meeting link from the description
        field joiningLink type string {
            indexing: attribute | summary
        }

        field permissions type array<string> {
            indexing: attribute | summary
        }

        field cancelledInstances type array<string> {
            indexing: attribute | summary
        }

        # To know if startTime of event available or defaultStartTime being used
        field defaultStartTime type bool {
            indexing: attribute | summary
        }
    }

     field chunk_embeddings type tensor<bfloat16>(v[DIMS])  {
        indexing: (input name || "") . " " .(input description || ""). " " .((input attachmentFilenames | for_each { _ }) . " " || ""). " " .(input url || "") | embed | attribute | index
        attribute {
            distance-metric: angular
        }
    }

    field name_fuzzy type string {
        indexing: input name | index
        index {
          enable-bm25
        }
        match {
          gram
          gram-size: 3
        }
    }

    fieldset default {
        fields: name, description, attachmentFilenames, attendeesNames, app, url, baseUrl, attendees
    }

    rank-profile default {
        inputs {
            query(e) tensor<bfloat16>(v[DIMS])
            query(alpha) double 
        }

        constants {
          THREE_MONTHS_IN_SECONDS: 7890000
          ONE_YEAR_IN_SECONDS: 31536000
          MAX_DOC_DECAY: 0.5
          META_FIELDS_DECAY: 0.8
        }

        function scale(val) {
            expression: 2*atan(val/4)/(3.14159)
        }

        function document_age() {
            # Default document age assuming to 3 months when no createdAt timestamp is present
            expression: max(if(isNan(attribute(createdAt)) == 1, THREE_MONTHS_IN_SECONDS, now() - (attribute(createdAt) / 1000)) / ONE_YEAR_IN_SECONDS, 0)
        }

        # Document score decays min to 0.5
        function doc_recency() {
            expression: max(1 / (1 + 0.5 * document_age), MAX_DOC_DECAY)
        }

        function vector_score() {
            expression: closeness(field, chunk_embeddings)
        }

        function scaled_bm25_name(){
            expression: scale(bm25(name))
        }

        function scaled_bm25_description(){
            expression: scale(bm25(description))
        }

        function combined_bm25() {
            expression {
                scale(bm25(name) + bm25(url) + bm25(description)) +
                (META_FIELDS_DECAY * scale(bm25(attachmentFilenames) + bm25(attendeesNames)))
            }
        }

        # Adjusting the ranking by reducing the weight of vector_score and metadata fields in BM25,  
        # while giving higher importance to BM25 scores for 'name' and 'url'
        first-phase {
            expression: (query(alpha) * scale(vector_score)) + ((1 - query(alpha)) * scale(combined_bm25))
        }

        global-phase {
            expression {
              (
                (query(alpha) * scale(vector_score)) +
                ((1 - query(alpha)) * max(scale(bm25(name)),scale(bm25(description)))) 
              ) * doc_recency
            }
            rerank-count: 1000
        }

        match-features {
          scale(bm25(name))
          scale(bm25(description))
          scale(bm25(attachmentFilenames))
          scale(bm25(attendeesNames))
          vector_score
          doc_recency
        }
    }

    document-summary autocomplete {
        summary name {
            source: name
        }
        summary app {
            source: app
        }
        summary entity {
            source: entity
        }
        summary docId {
            source: docId
        }
    }

    # Autocomplete rank profile for fuzzy prefix search
    rank-profile autocomplete {
      first-phase {
        expression: bm25(name_fuzzy)
      }
      match-features {
        bm25(name_fuzzy)
      }
    }
}