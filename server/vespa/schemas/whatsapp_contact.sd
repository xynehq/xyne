schema whatsapp_contact {
  document whatsapp_contact {
    field docId type string {
      indexing: attribute | summary
    }

    field phoneNumber type string {
      indexing: index | attribute | summary
      index: enable-bm25
    }

    field name type string {
      indexing: index | summary
      index: enable-bm25
    }

    field app type string {
      indexing: attribute | summary
      attribute: fast-search
      match: exact
    }

    field entity type string {
      indexing: attribute | summary
      attribute: fast-search
      match: exact
    }

    field permissions type array<string> {
      indexing: attribute | summary
      attribute: fast-search
    }

    field image type string {
      indexing: attribute | summary
    }
  }

  field chunk_embeddings type tensor<bfloat16>(v[DIMS])  {
    indexing: (input name || "") . " " . (input phoneNumber || "") | embed | attribute | index
    attribute {
        distance-metric: angular
    }
  }

  field name_fuzzy type string {
    indexing: input name | index
    index {
      enable-bm25
    }
    match {
      gram
      gram-size: 3
    }
  }

  fieldset default {
    fields: name, phoneNumber
  }

  rank-profile default {
    inputs {
      query(decay_factor) float
      query(e) tensor<bfloat16>(v[DIMS])
    }

    function bm25_score() {
      expression {
        (
            bm25(name)
        ) + 
        (query(decay_factor))
      } 
    }

    function vector_score() {
      expression: closeness(field, chunk_embeddings)
    }

    first-phase {
      expression : bm25_score()
    }

    global-phase {
      expression {
        (normalize_linear(bm25_score) * normalize_linear(vector_score))
      }
      rerank-count: 1000
    }

    match-features {
      bm25(name)
      vector_score
    }
  }

  rank-profile default_native inherits default { }

  document-summary autocomplete {
    summary name {
      source: name
    }
    summary app {
      source: app
    }
    summary entity {
      source: entity
    }
    summary docId {
      source: docId
    }
  }

  # Autocomplete rank profile for fuzzy prefix search
  rank-profile autocomplete {
    first-phase {
      expression: bm25(name_fuzzy)
    }
    match-features {
      bm25(name_fuzzy)
    }
  }
} 