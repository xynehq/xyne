schema mail {
  document mail {

    # basically the messageId
    field docId type string {
      indexing: attribute | summary
      attribute: fast-search
    }

    field threadId type string {
      indexing: attribute | summary
      attribute: fast-search
    }

    field subject type string {
      indexing: summary | index
      index: enable-bm25
    }

    field chunks type array<string> {
      indexing: index | summary
      index {
        enable-bm25
      }
    }

    field timestamp type long {
      indexing: attribute | summary
      attribute: fast-search
    }

    field app type string {
      indexing: attribute | summary
      attribute: fast-search
      match: exact
    }

    field entity type string {
      indexing: attribute | summary
      attribute: fast-search
      match: exact
    }

    field permissions type array<string> {
      indexing: attribute | summary
      attribute: fast-search
    }

    field from type string {
      indexing: attribute | summary | index
      attribute: fast-search
      index: enable-bm25
    }

    field to type array<string> {
      indexing: attribute | summary | index
      attribute: fast-search
      index: enable-bm25
    }

    field cc type array<string> {
      indexing: attribute | summary | index
      attribute: fast-search
      index: enable-bm25
    }

    field bcc type array<string> {
      indexing: attribute | summary | index
      attribute: fast-search
      index: enable-bm25
    }

    field mimeType type string {
      indexing: attribute | summary
    }

    field attachmentFilenames type array<string> {
      indexing: attribute | summary | index
      attribute: fast-search
      index: enable-bm25
    }

    # Define attachments as an array of structured objects
    # order matters
    struct attachment {
      field fileType type string {}
      field fileSize type long {}
    }

    field attachments type array<attachment> {

    }
    field labels type array<string> {
    indexing: attribute | summary | index
    attribute: fast-search
  }
  }
  field chunk_embeddings type tensor<bfloat16>(p{}, v[384])  {
    indexing: guard { input chunks } | embed | attribute | index
    attribute {
      distance-metric: angular
    }
  }

  field subject_embeddings type tensor<bfloat16>(v[384])  {
    indexing: input subject | embed | attribute | index
    attribute {
        distance-metric: angular
    }
  }

  field subject_fuzzy type string {
    indexing: input subject | index
    index {
      enable-bm25
    }
    match {
      gram
      gram-size: 3
    }
  }

  fieldset default {
    fields: subject, app, entity, chunks, attachmentFilenames, from, to, cc, bcc, labels
  }

  fieldset autocomplete {
    fields: subject, app, entity
  }

  # Hybrid search rank profile combining BM25 for subject and chunks, and vector search for chunk embeddings
  rank-profile initial {
    inputs {
      query(e) tensor<bfloat16>(v[384])  # Query embedding
      query(alpha) double  # Alpha parameter for hybrid weight
      query(bm25ChunkWeight) double 
    }

    function chunk_vector_score() {
      expression: closeness(field, chunk_embeddings)
    }

    function subject_bm25_score() {
      expression: bm25(subject)
    }
    function attachment_bm25_score() {
      expression: bm25(attachmentFilenames)
    }

    # First phase combines BM25 (subject and chunks) and vector similarity (chunks)
    first-phase {
      expression: (query(alpha) * chunk_vector_score()) + ((1 - query(alpha)) * (bm25(chunks) + bm25(subject)))
    }

    # Global phase (optional if more complex reranking is needed)
    # Note: Ensure the functions are called properly in the expression
    global-phase {
      expression {
        (query(alpha) * normalize_linear(chunk_vector_score)) +
        ((1 - query(alpha)) * (normalize_linear(bm25(chunks)) + normalize_linear(bm25(subject)) + normalize_linear(attachment_bm25_score)))
      }
      rerank-count: 1000
    }

    match-features {
      bm25(subject)
      bm25(chunks)
      closeness(field, chunk_embeddings)
    }
  }
    rank-profile default inherits initial {
    
      constants {
        THREE_MONTHS_IN_SECONDS: 7890000
        ONE_YEAR_IN_SECONDS: 31536000
        MAX_DOC_DECAY: 0.5
      }

      function scale(val) {
        expression: 2*atan(val/4)/(3.14159)
      }

      function document_age() {
        # Default document age assuming to 3 months when no updateAt timestamp is present
        expression: max(if(isNan(attribute(timestamp)) == 1, THREE_MONTHS_IN_SECONDS, now() - (attribute(timestamp) / 1000)) / ONE_YEAR_IN_SECONDS, 0)
      }

      # Document score decays min to 0.5
      function doc_recency() {
        expression: max(1 / (1 + 0.5 * document_age), MAX_DOC_DECAY)
      }

      function subject_vector_score() {
        expression: closeness(field, subject_embeddings)
      }
      
      function chunk_vector_score() {
        expression: closeness(field, chunk_embeddings)
      }

      function vector_score() {
        expression: max(chunk_vector_score,subject_vector_score)
      }

      function scaled_bm25_chunks() {
        expression: scale(bm25(chunks))
      }

      function scaled_bm25_subject() {
        expression: scale(bm25(subject))
      }

      function combined_bm25() {
        expression: (query(bm25ChunkWeight) * scaled_bm25_chunks) + scaled_bm25_subject
      }

      first-phase {
        expression: (query(alpha) * scale(vector_score)) + ((1 - query(alpha)) * scale(combined_bm25))
      }

      global-phase {
        expression {
          (
            (query(alpha) * scale(vector_score)) +
            ((1 - query(alpha)) * max(scaled_bm25_subject,(query(bm25ChunkWeight) * scaled_bm25_chunks)))
          ) * doc_recency
        }
        rerank-count: 1000
      }

    match-features {
      chunk_vector_score
      subject_vector_score
      scaled_bm25_chunks
      scaled_bm25_subject
      doc_recency
    }
  }

  document-summary default {
    summary subject {}
    summary chunks_summary {
      bolding: on
      source: chunks
    }
    summary to {}
    summary cc {}
    summary bcc {}
    summary attachments {
      source: attachments
    }
  }

  document-summary autocomplete {
    summary docId {}
    summary threadId {}
    summary subject {}
    summary app {}
    summary entity {}
  }

  rank-profile autocomplete {
    first-phase {
      expression: bm25(subject_fuzzy)
    }
    match-features {
      bm25(subject_fuzzy)
    }
  }
}