schema mail {
  document mail {

    # basically the messageId
    field docId type string {
      indexing: attribute | summary
      attribute: fast-search
    }

    field threadId type string {
      indexing: attribute | summary
      attribute: fast-search
    }

    field subject type string {
      indexing: summary | index
      index: enable-bm25
    }

    field chunks type array<string> {
      indexing: index | summary
      index {
        enable-bm25
      }
    }

    field timestamp type long {
      indexing: attribute | summary
      attribute: fast-search
    }

    field app type string {
      indexing: attribute | summary
      attribute: fast-search
      match: exact
    }

    field entity type string {
      indexing: attribute | summary
      attribute: fast-search
      match: exact
    }

    field permissions type array<string> {
      indexing: attribute | summary
      attribute: fast-search
    }

    field from type string {
      indexing: attribute | summary | index
      attribute: fast-search
      index: enable-bm25
    }

    field to type array<string> {
      indexing: attribute | summary | index
      attribute: fast-search
      index: enable-bm25
    }

    field cc type array<string> {
      indexing: attribute | summary | index
      attribute: fast-search
      index: enable-bm25
    }

    field bcc type array<string> {
      indexing: attribute | summary | index
      attribute: fast-search
      index: enable-bm25
    }

    field mimeType type string {
      indexing: attribute | summary
    }

    field attachmentFilenames type array<string> {
      indexing: attribute | summary | index
      attribute: fast-search
      index: enable-bm25
    }

    # Define attachments as an array of structured objects
    # order matters
    struct attachment {
      field fileType type string {}
      field fileSize type long {}
    }

    field attachments type array<attachment> {

    }
    field labels type array<string> {
      indexing: attribute | summary | index
      attribute: fast-search
    }
  }
  field chunk_embeddings type tensor<bfloat16>(p{}, v[DIMS])  {
    indexing: input chunks | embed | attribute | index
    attribute {
      distance-metric: angular
    }
  }

  field subject_fuzzy type string {
    indexing: input subject | index
    index {
      enable-bm25
    }
    match {
      gram
      gram-size: 3
    }
  }

  fieldset default {
    fields: subject, app, entity, chunks, attachmentFilenames, from, to, cc, bcc, labels
  }

  fieldset autocomplete {
    fields: subject, app, entity
  }

  # Hybrid search rank profile combining BM25 for subject and chunks, and vector search for chunk embeddings
    rank-profile initial {
      inputs {
        query(e) tensor<bfloat16>(v[DIMS])  # Query embedding
        query(alpha) double  # Alpha parameter for hybrid weight
        query(recency_decay_rate) double
      }

      constants {
        THREE_MONTHS_IN_SECONDS: 7890000
        ONE_YEAR_IN_SECONDS: 31536000
        MAX_DOC_DECAY: 0.5
      }

      function scale(val) {
        expression: 2*atan(val/4)/(3.14159)
      }

      function document_age() {
        # Default document age assuming to 3 months when no updateAt timestamp is present
        expression: max(if(isNan(attribute(timestamp)) == 1, THREE_MONTHS_IN_SECONDS, now() - (attribute(timestamp) / 1000)) / ONE_YEAR_IN_SECONDS, 0)
      }

      # Document score decays min to 0.5
      function doc_recency() {
        expression: max(1 / (1 + query(recency_decay_rate) * sqrt(document_age)), MAX_DOC_DECAY)
      }

      function vector_score() {
        expression: closeness(field, chunk_embeddings)
      }

      function combined_bm25() {
        expression: bm25(subject) + bm25(chunks)
      }

      function matchedFieldCount() {
        expression {
          # The `matches` returns 1 if the field contains a match, otherwise 0
          matches(subject) + matches(chunks)
        }
      }

      function combined_nativeRank() {
        expression: (nativeRank(subject) + nativeRank(chunks)) / if(matchedFieldCount == 0, 1, matchedFieldCount)
      }

      function chunk_scores() {
        expression: elementwise(bm25(chunks), x, double)
      }

    }

  rank-profile default_native inherits initial {

      first-phase {
        expression: (query(alpha) * vector_score) + ((1 - query(alpha)) * combined_nativeRank)
      }

      global-phase {
        expression {
          (
            (query(alpha) * vector_score) + 
            ((1 - query(alpha)) *  combined_nativeRank)
          ) * doc_recency
        }
        rerank-count: 1000
      }

    match-features {
      doc_recency
      matchedFieldCount
      vector_score
      combined_nativeRank
      nativeRank(subject)
      nativeRank(chunks)
      chunk_scores
    }
  }

  # New rank profile designed for sorting: implements recency binning with hybrid scoring within bins.
  rank-profile global_sorted inherits initial {
    # Query inputs allowing control over recency parameters
    inputs {
        # query(e) and query(alpha) are inherited from 'initial'
        query(bin_size_days) double: 1.0
    }

    # Constants for recency binning
    constants {
        ONE_DAY_IN_SECONDS: 86400.0
        # Using a large multiplier ensures bin differences dominate
        RECENCY_BIN_MULTIPLIER: 1000000.0
        # Base score high enough to accommodate many bins
        MAX_SCORE_BASE: 1000000000.0
    }

    # Calculate document age in days with proper handling of missing timestamps
    function document_age_days() {
      expression: max(0.0, if(isNan(attribute(timestamp)) == 1, THREE_MONTHS_IN_SECONDS / ONE_DAY_IN_SECONDS, (now() - (attribute(timestamp) / 1000)) / ONE_DAY_IN_SECONDS))
    }

    # Assign documents to time-based bins
    function recency_bin_index() {
      expression: floor(document_age_days() / query(bin_size_days))
    }

    # Score based on recency bin - newer bins get MUCH higher scores
    function recency_bin_score() {
      expression: MAX_SCORE_BASE - (recency_bin_index() * RECENCY_BIN_MULTIPLIER)
    }

    # Calculate the hybrid relevance score (combining vector and lexical search)
    # Uses the full range of scores without artificial normalization
    function hybrid_relevance_score() {
      expression: (query(alpha) * vector_score()) + ((1 - query(alpha)) * combined_nativeRank)
    }

    # --- Ranking Expression ---
    first-phase {
      # Final score = Score from recency bin + full hybrid relevance score
      # This ensures recent documents always win, but relevance is preserved within bins
      expression: recency_bin_score() + hybrid_relevance_score()
    }

    # Include all relevant features for debugging/monitoring
    match-features {
      query(alpha)
      vector_score
      chunk_scores
      combined_nativeRank
      matchedFieldCount
      nativeRank(subject)
      nativeRank(chunks)
      document_age_days
      recency_bin_index
      recency_bin_score
      hybrid_relevance_score
    }
  }

  # will be use for single schema query
  rank-profile default_bm25 inherits initial {

    first-phase {
      expression {
        (
          (query(alpha) * vector_score) + ((1 - query(alpha)) * combined_bm25)
        )
      }
    }

    global-phase {
      expression {
        (
          (query(alpha) * vector_score) +
          ((1 - query(alpha)) * scale(combined_bm25))
        )
      }
      rerank-count: 1000
    }

     match-features {
      vector_score
      bm25(chunks)
      bm25(subject)
      scale(combined_bm25)
      chunk_scores
    }
  }

  # change here for ai queries accordingly
  rank-profile default_ai inherits initial {

      first-phase {
        expression: (query(alpha) * vector_score) + ((1 - query(alpha)) * combined_nativeRank)
      }

      global-phase {
        expression {
          (
            (query(alpha) * vector_score) +
            ((1 - query(alpha)) *  combined_nativeRank)
          )
        }
        rerank-count: 1000
      }

    match-features {
      vector_score
      combined_nativeRank
      nativeRank(subject)
      nativeRank(chunks)
      chunk_scores
    }
  }

  rank-profile default_random inherits initial {
    first-phase {
        expression: random.match
    }

    match-features {
      matchedFieldCount
      vector_score
      combined_nativeRank
      nativeRank(subject)
      nativeRank(chunks)
      chunk_scores
    }
  }

  document-summary default {
    summary subject {}
    summary chunks_summary {
      bolding: on
      source: chunks
    }
    summary to {}
    summary cc {}
    summary bcc {}
    summary attachments {
      source: attachments
    }
  }

  document-summary autocomplete {
    summary docId {}
    summary threadId {}
    summary subject {}
    summary app {}
    summary entity {}
  }

  rank-profile autocomplete {
    first-phase {
      expression: bm25(subject_fuzzy)
    }
    match-features {
      bm25(subject_fuzzy)
    }
  }
}