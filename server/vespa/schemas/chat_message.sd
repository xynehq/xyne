schema chat_message {
  document chat_message {
    field docId type string {
      indexing: attribute | summary
    }

    field teamId type string {
      indexing: attribute | summary
      attribute: fast-search
    }

    field channelId type string {
      indexing: attribute | summary
      attribute: fast-search
    }

    field text type string {
      indexing: index | summary
      index: enable-bm25
    }

    field name type string {
      indexing: index | attribute | summary
      index: enable-bm25
    }

    field username type string {
      indexing: index | attribute | summary
      index: enable-bm25
    }

    field image type string {
      indexing: attribute | summary
    }

    field userId type string {
      indexing: attribute | summary
      attribute: fast-search
    }

    field createdAt type double {
      indexing: attribute | summary
      attribute: fast-search
    }

    # field messageType type string {
    #   indexing: attribute | summary
    # }

    field threadId type string {
      indexing: attribute | summary
    }

    field teamRef type reference<chat_team> {
      indexing: attribute
    }

    field chatRef type reference<chat_container> {
      indexing: attribute
    }

    # field userRef type reference<chat_user> {
    #   indexing: attribute
    # }

    field app type string {
      indexing: attribute | summary
      attribute: fast-search
      match: exact
    }

    field entity type string {
      indexing: attribute | summary
      attribute: fast-search
      match: exact
    }

    field attachmentIds type array<string> {
      indexing: attribute | summary
    }

    field reactions type int {
      indexing: attribute | summary
    }

    field replyCount type int {
      indexing: attribute | summary
    }

    field replyUsersCount type int {
      indexing: attribute | summary
    }

    field mentions type array<string> {
      indexing: index | attribute | summary
      index: enable-bm25
    }

    field updatedAt type double {
      indexing: attribute | summary
      attribute: fast-search
    }

    field deletedAt type double {
      indexing: attribute | summary
      attribute: fast-search
    }

    field metadata type string {
      indexing: attribute | summary
    }
  }
  import field teamRef.domain as domain {}
  import field teamRef.teamName as teamName {}
  import field chatRef.isPrivate as isPrivate {}
  import field chatRef.permissions as permissions {}
  import field chatRef.channelName as  channelName {}
  import field chatRef.isIm as isIm {}
  import field chatRef.isMpim as isMpim {}

  field text_embeddings type tensor<bfloat16>(v[DIMS]) {
    indexing: input text | embed | attribute | index
    attribute {
      distance-metric: angular
    }
  }

  fieldset default {
    fields: text, mentions, teamId, channelId, userId, threadId, app, entity, attachmentIds, domain, channelName, isPrivate
  }

  rank-profile initial {
    inputs {
      query(e) tensor<bfloat16>(v[DIMS])
      query(alpha) double
    }

    function vector_score() {
      expression: closeness(field, text_embeddings)
    }

    function scale(val) {
      expression: 2*atan(val/4)/(3.14159)
    }

    function combined_bm25(){
      expression: bm25(text) + bm25(username) + bm25(name)
    }

    function matchedFieldCount() {
      expression {
        # The `matches` returns 1 if the field contains a match, otherwise 0
        matches(text) + matches(username) + matches(name)
      }
    }

    function combined_nativeRank() {
      expression { 
        (
          nativeRank(text) + 
          nativeRank(username) + 
          nativeRank(name)
        ) / if(matchedFieldCount == 0, 1, matchedFieldCount)
      }
    }

    function freshness_score() {
      expression: exp(-1 * (now() - (attribute(createdAt) / 1000)) / (3600 * 24))
    }
  }

  rank-profile default_native inherits initial {
    
    first-phase {
      expression: (query(alpha) * vector_score) + ((1 - query(alpha)) *  combined_nativeRank)
    }

    global-phase {
      expression {
        (
          (query(alpha) * vector_score) + 
          ((1 - query(alpha)) *  combined_nativeRank)
        )
      }
      rerank-count: 1000
    }

    match-features {
      matchedFieldCount
      vector_score
      combined_nativeRank
      nativeRank(text)
      nativeRank(username)
      nativeRank(name)
    }
  }

  # will be use for single schema query
  rank-profile default_bm25 inherits initial {
    
    first-phase {
      expression: (query(alpha) * vector_score) + ((1 - query(alpha)) * combined_bm25)
    }

    global-phase {
      expression {
        (
          (query(alpha) * vector_score) + 
          ((1 - query(alpha)) * scale(combined_bm25))
        )
      }
      rerank-count: 1000
    }

    match-features {
      vector_score
      scale(combined_bm25)
      bm25(text)
      bm25(username)
      bm25(name)
    }
  }

  # change here for ai queries accordingly
  rank-profile default_ai inherits initial {
    
    first-phase {
      expression: (query(alpha) * vector_score) + ((1 - query(alpha)) *  combined_nativeRank)
    }

    global-phase {
      expression {
        (
          (query(alpha) * vector_score) + 
          ((1 - query(alpha)) *  combined_nativeRank)
        )
      }
      rerank-count: 1000
    }

    match-features {
      vector_score
      combined_nativeRank
      nativeRank(text)
      nativeRank(username)
      nativeRank(name)
    }
  }

 rank-profile unranked inherits default {
    # Simple constant expression - returns same score for all documents
    first-phase {
      expression: 0
    }
    # Skip second phase ranking completely
    second-phase {
      expression: 0
    }
    # Skip global phase
    global-phase {
      expression: 0
    }
    # No need to calculate features for unranked results
    match-features {}
  }

  document-summary default {
    summary text {
      bolding: on
    }

    summary mentions {}
    summary attachmentIds {}
    summary domain {}
    summary isPrivate {}
    # summary reactions {}
  }
}

  