schema transcript {
  document transcript {

    field docId type string {
      indexing: attribute | summary
    }

    field title type string {
      indexing: index | summary | attribute
      index { enable-bm25 }
    }

    field description type string {
      indexing: index | summary | attribute
      index { enable-bm25 }
    }

    field app type string {
      indexing: attribute | summary
      attribute: fast-search
      match: exact
    }

    field fileName type string {
      indexing: attribute | summary
      attribute: fast-search
    }

    field fileSize type long {
      indexing: attribute | summary
    }

    field chunks type array<string> {
      indexing: index | summary
      index { enable-bm25 }
    }

    field uploadedBy type string {
      indexing: attribute | summary
      attribute: fast-search
    }

    field duration type long {
      indexing: attribute | summary
    }

    field mimeType type string {
      indexing: attribute | summary
    }

    field createdAt type long {
      indexing: attribute | summary
      attribute: fast-search
    }

    field updatedAt type long {
      indexing: attribute | summary
      attribute: fast-search
    }

    field metadata type string {
      indexing: attribute | summary
    }
  }

  # Vector embeddings
  field chunk_embeddings type tensor<bfloat16>(p{}, v[DIMS]) {
    indexing: input chunks | embed | attribute | index
    attribute { distance-metric: angular }
  }

  # Fuzzy title
  field title_fuzzy type string {
    indexing: input title | index
    index { enable-bm25 }
    match { gram gram-size: 3 }
  }


  fieldset default      { fields: title, description, chunks, uploadedBy, fileName }
  fieldset autocomplete { fields: title, fileName, uploadedBy }
  fieldset search       { fields: title, description, chunks, fileName, uploadedBy }

  rank-profile base_ranking {

    function matchedFieldCount() {
      expression: matches(title) + matches(description) + matches(chunks)
    }

    function combined_bm25() {
      expression: bm25(title) + bm25(description) + bm25(chunks)
    }

    function combined_nativeRank() {
      expression: (nativeRank(title) + nativeRank(description) + nativeRank(chunks)) / if(matchedFieldCount == 0, 1, matchedFieldCount)
    }
  }

  rank-profile default inherits base_ranking {

    inputs {
      query(e)                 tensor<bfloat16>(v[DIMS])
      query(alpha)             double: 0.5
      query(recency_decay_rate) double: 0.1
    }

   
    function scale(val) {
      expression: 2 * atan(val / 4) / 3.14159
    }

    function document_age() {
      expression: max( if(isNan(attribute(updatedAt)) == 1, 7890000, now() - (attribute(updatedAt) / 1000)) / 31536000, 0 )
    }

    function doc_recency() {
      expression: max( 1 / (1 + query(recency_decay_rate) * sqrt(document_age)), 0.5 )
    }

    function vector_score() {
      expression: closeness(field, chunk_embeddings)
    }

    function duration_score() {
      expression: if(attribute(duration) > 0, log10(attribute(duration) + 1), 0)
    }


    first-phase  { expression: query(alpha) * vector_score + (1 - query(alpha)) * combined_nativeRank }
    global-phase { 
      expression: (query(alpha) * vector_score + (1 - query(alpha)) * combined_nativeRank) * doc_recency
      rerank-count: 1000 
    }

    match-features {
      matchedFieldCount
      vector_score
      combined_nativeRank
      nativeRank(title)
      nativeRank(description)
      nativeRank(chunks)
      doc_recency
      duration_score
    }
  }

  # Alias so "default_native" always resolves
  rank-profile default_native inherits default { }

  rank-profile recent_uploads inherits base_ranking {

    inputs {
      query(e)             tensor<bfloat16>(v[DIMS])
      query(alpha)         double: 0.5
      query(bin_size_days) double: 1.0
    }

    function document_age_days() {
      expression: max(0.0, if(isNan(attribute(createdAt)) == 1, 90.0, (now() - (attribute(createdAt) / 1000)) / 86400))
    }

    function recency_bin_index() {
      expression: floor(document_age_days / query(bin_size_days))
    }

    function recency_bin_score() {
      expression: 1000000000 - (recency_bin_index * 10000)
    }

    function vector_score() {
      expression: closeness(field, chunk_embeddings)
    }

    function hybrid_relevance_score() {
      expression: query(alpha) * vector_score + (1 - query(alpha)) * combined_nativeRank
    }

    function normalized_hybrid_relevance() {
      expression: max(0.0, min(hybrid_relevance_score / 10.0, 9999))
    }

    first-phase { expression: recency_bin_score + normalized_hybrid_relevance }

    match-features {
      vector_score
      combined_nativeRank
      document_age_days
      recency_bin_index
      hybrid_relevance_score
      normalized_hybrid_relevance
    }
  }

  rank-profile by_uploader inherits base_ranking {
    first-phase { expression: if(matches(uploadedBy), 100 + combined_bm25, combined_bm25) }
    match-features { combined_bm25 matches(uploadedBy) }
  }

  rank-profile autocomplete {
    first-phase { expression: bm25(title_fuzzy) + if(matches(uploadedBy), 50, 0) }
    match-features { bm25(title_fuzzy) matches(uploadedBy) }
  }

  rank-profile unranked { first-phase { expression: 1 } }

  document-summary default {
    summary chunks_summary { bolding: on  source: chunks }
  }
}
