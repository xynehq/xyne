services:
  prometheus-init:
    image: busybox
    volumes:
      - ${XYNE_DATA_DIR:-./data}/prometheus-data:/prometheus
    command: |
      sh -c '
        mkdir -p /prometheus
        chown -R 65534:65534 /prometheus
        chmod 755 /prometheus
      '
    user: "0:0"
    networks:
      - xyne

  prometheus:
    image: "prom/prometheus:latest"
    container_name: xyne-prometheus
    user: "65534:65534"
    depends_on:
      prometheus-init:
        condition: service_completed_successfully
    volumes:
      - ./prometheus-selfhosted.yml:/etc/prometheus/prometheus-selfhosted.yml
      - ${XYNE_DATA_DIR:-./data}/prometheus-data:/prometheus
    ports:
    - "9090:9090"
    command:
      - "--config.file=/etc/prometheus/prometheus-selfhosted.yml"
      - "--storage.tsdb.path=/prometheus"
    restart: always
    networks:
      - xyne
    extra_hosts:
    - "host.docker.internal:host-gateway"

  grafana:
    image: grafana/grafana:latest
    container_name: xyne-grafana
    user: "${DOCKER_UID}:${DOCKER_GID}"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ${XYNE_DATA_DIR:-./data}/grafana-storage:/var/lib/grafana 
    ports:
      - "3000"
    restart: always
    networks:
      - xyne
    environment:
      - POSTGRES_USER=xyne
      - POSTGRES_PASSWORD=xyne
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s:%(http_port)s/grafana

  vespa:
    image: xyne-vespa-gpu
    build:
      context: .
      dockerfile: Dockerfile-vespa-gpu
    container_name: vespa
    hostname: vespa
    runtime: nvidia
    volumes:
      - ${XYNE_DATA_DIR:-./data}/vespa-data:/opt/vespa/var
      - ../../server/vespa:/app/vespa
    networks:
      - xyne
    ulimits:
      nproc: 409600
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:19071/state/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "6"
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility

      # Config server - reduced from 4g to free up memory for searchnode
      - VESPA_CONFIGSERVER_JVMARGS=-Xms1g -Xmx2g -XX:+UseG1GC -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/opt/vespa/var/crash
      - VESPA_CONFIGPROXY_JVMARGS=-Xms512m -Xmx1g -XX:+UseG1GC

      # Storage and search nodes - SIGNIFICANTLY INCREASED to handle 102GB dataset
      # Content node handles document storage and metadata
      - VESPA_CONTENT_JVMARGS=-Xms20g -Xmx40g -XX:+UseG1GC -XX:MaxGCPauseMillis=500 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/opt/vespa/var/crash
      # Searchnode is the critical component - needs much more memory for embeddings and indexes
      - VESPA_SEARCHNODE_JVMARGS=-Xms140g -Xmx140g -XX:+UseG1GC -XX:MaxGCPauseMillis=500 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/opt/vespa/var/crash

      # Support components (kept small)
      - VESPA_LOGSERVER_JVMARGS=-Xms128m -Xmx256m -XX:+UseG1GC
      - VESPA_LOGS_JVMARGS=-Xms128m -Xmx256m -XX:+UseG1GC
      - VESPA_CLUSTER_CONTROLLER_JVMARGS=-Xms128m -Xmx256m -XX:+UseG1GC
      - VESPA_METRICS_JVMARGS=-Xms256m -Xmx512m -XX:+UseG1GC

  vespa-deploy:
    build:
      context: ../..
      dockerfile: deployment/portable/vespa-deploy/Dockerfile
    container_name: vespa-deploy
    depends_on:
      vespa:
        condition: service_started
    environment:
      - VESPA_CONFIGSERVERS=vespa
    volumes:
      - ${XYNE_DATA_DIR:-./data}/vespa-models:/app/vespa/models
    networks:
      - xyne
    restart: "no"

  xyne-db:
    image: postgres:15-alpine
    container_name: xyne-db
    environment:
      POSTGRES_USER: xyne
      POSTGRES_PASSWORD: xyne
      POSTGRES_DB: xyne
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - ${XYNE_DATA_DIR:-./data}/postgres-data:/var/lib/postgresql/data
    networks:
      - xyne
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U xyne -d xyne"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "6"

  loki-init:
    image: busybox
    volumes:
      - ${XYNE_DATA_DIR:-./data}/loki-data:/loki-data
    command: |
      sh -c '
        mkdir -p /loki-data
        chown -R 10001:10001 /loki-data
        chmod 755 /loki-data
      '
    user: "0:0"
    networks:
      - xyne

  livekit:
    image: livekit/livekit-server:v1.9.1
    command: --config /etc/livekit.yaml
    container_name: livekit
    restart: unless-stopped
    ports:
      - "7880:7880"
      - "7881:7881"
      - "7882:7882/udp"
    volumes:
      - ../livekit.yaml:/etc/livekit.yaml
    environment:
      LIVEKIT_KEYS: "${LIVEKIT_API_KEY:-devkey}: ${LIVEKIT_API_SECRET:-devsecret}"
    networks:
      - xyne

  loki:
    image: grafana/loki:3.4.1
    container_name: loki
    user: "10001:10001"
    depends_on:
      - loki-init
    ports:
      - "3100:3100"
    volumes:
      - ./loki-config.yaml:/mnt/config/loki-config.yaml
      - ${XYNE_DATA_DIR:-./data}/loki-data:/loki
    command: --config.file=/mnt/config/loki-config.yaml
    restart: unless-stopped
    networks:
      - xyne

  promtail-init:
    image: busybox
    volumes:
      - ${XYNE_DATA_DIR:-./data}/promtail-data:/promtail-data
    command: |
      sh -c '
        mkdir -p /promtail-data
        chown -R 10001:10001 /promtail-data
        chmod 755 /promtail-data
      '
    user: "0:0"
    networks:
      - xyne

  promtail:
    image: grafana/promtail:3.4.1
    container_name: promtail
    user: "0:${DOCKER_GROUP_ID:-999}"  # root user with docker group for socket access
    depends_on:
      - promtail-init
      - loki
    volumes:
      - ./promtail-config.yaml:/mnt/config/promtail-config.yaml
      - ${XYNE_DATA_DIR:-./data}/promtail-data:/promtail
      - ${XYNE_DATA_DIR:-./data}/app-logs:/var/log/app:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: --config.file=/mnt/config/promtail-config.yaml
    restart: unless-stopped
    networks:
      - xyne
    environment:
      - DOCKER_GROUP_ID=${DOCKER_GROUP_ID:-999}

  nginx:
    image: nginx:1.26-alpine
    container_name: xyne-nginx
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - livekit
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    environment:
      - NGINX_DOMAIN=${NGINX_DOMAIN:-localhost}
      - APP_PORT=${APP_PORT:-3001}
    networks:
      - xyne
    command: >
      /bin/sh -c "
      envsubst '$$NGINX_DOMAIN $$APP_PORT' < /etc/nginx/nginx.conf > /tmp/nginx.conf &&
      nginx -g 'daemon off;' -c /tmp/nginx.conf
      "

networks:
  xyne:
    external: true
